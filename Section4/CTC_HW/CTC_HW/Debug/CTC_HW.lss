
CTC_HW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000281  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "./MCAL/Timer/Timer.h"

int main(void)
{
	init_CTC_timer();
  6c:	0e 94 43 00 	call	0x86	; 0x86 <init_CTC_timer>
		
    while (1)
	{
		set_CTC(16);
  70:	80 e1       	ldi	r24, 0x10	; 16
  72:	0e 94 4a 00 	call	0x94	; 0x94 <set_CTC>
		CTC_end();
  76:	0e 94 4c 00 	call	0x98	; 0x98 <CTC_end>
		set_CTC(6);
  7a:	86 e0       	ldi	r24, 0x06	; 6
  7c:	0e 94 4a 00 	call	0x94	; 0x94 <set_CTC>
		CTC_end();	
  80:	0e 94 4c 00 	call	0x98	; 0x98 <CTC_end>
  84:	f5 cf       	rjmp	.-22     	; 0x70 <main+0x4>

00000086 <init_CTC_timer>:
#include <avr/io.h>
#include "Timer.h"

void init_CTC_timer()
{
	DDRB |= (1<<PB3);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	87 bb       	out	0x17, r24	; 23
	TCCR0 |= 1 << CS01 | 1 << WGM01 | 1 << COM00;
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	8a 61       	ori	r24, 0x1A	; 26
  90:	83 bf       	out	0x33, r24	; 51
  92:	08 95       	ret

00000094 <set_CTC>:
}

void set_CTC(uint8_t OC)
{
	OCR0 = OC;
  94:	8c bf       	out	0x3c, r24	; 60
  96:	08 95       	ret

00000098 <CTC_end>:
}

void CTC_end()
{
	while ((TIFR & (1 << OCF0)) == 0);
  98:	08 b6       	in	r0, 0x38	; 56
  9a:	01 fe       	sbrs	r0, 1
  9c:	fd cf       	rjmp	.-6      	; 0x98 <CTC_end>
	TIFR |= 1 << OCF0;
  9e:	88 b7       	in	r24, 0x38	; 56
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	88 bf       	out	0x38, r24	; 56
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
