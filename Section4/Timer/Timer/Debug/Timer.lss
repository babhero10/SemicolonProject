
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057c  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ed  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d3  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	TCCR0 = 1 << CS00; 
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	83 bf       	out	0x33, r24	; 51
	int c = 0;
	DDRC |= 1 << 0;
  70:	84 b3       	in	r24, 0x14	; 20
  72:	81 60       	ori	r24, 0x01	; 1
  74:	84 bb       	out	0x14, r24	; 20
#include <avr/io.h>

int main(void)
{
	TCCR0 = 1 << CS00; 
	int c = 0;
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <main+0x12>
	DDRC |= 1 << 0;
	while (1) 
    {
		while((TIFR & (1 << TOV0)) == 0)
		TCNT0 = 0;
  7c:	12 be       	out	0x32, r1	; 50
	TCCR0 = 1 << CS00; 
	int c = 0;
	DDRC |= 1 << 0;
	while (1) 
    {
		while((TIFR & (1 << TOV0)) == 0)
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	00 fe       	sbrs	r0, 0
  82:	fc cf       	rjmp	.-8      	; 0x7c <main+0x10>
		TCNT0 = 0;
		TIFR |= 1 << TOV0;
  84:	88 b7       	in	r24, 0x38	; 56
  86:	81 60       	ori	r24, 0x01	; 1
  88:	88 bf       	out	0x38, r24	; 56
		c++;
  8a:	2f 5f       	subi	r18, 0xFF	; 255
  8c:	3f 4f       	sbci	r19, 0xFF	; 255
		if (c >= 5882)
  8e:	2a 3f       	cpi	r18, 0xFA	; 250
  90:	86 e1       	ldi	r24, 0x16	; 22
  92:	38 07       	cpc	r19, r24
  94:	a4 f3       	brlt	.-24     	; 0x7e <main+0x12>
		{
			PORTC ^= 1 << 0;
  96:	95 b3       	in	r25, 0x15	; 21
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 27       	eor	r24, r25
  9c:	85 bb       	out	0x15, r24	; 21
			c = 0;
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	ed cf       	rjmp	.-38     	; 0x7e <main+0x12>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
