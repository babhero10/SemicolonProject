
HW2S1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077c  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000640  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000079  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_port_changer>:
#include "./../MCAL/PortChange.h"
#include "PortChanger.h"

void init_port_changer()
{
	init_port();
  6c:	0e 94 46 00 	call	0x8c	; 0x8c <init_port>
  70:	08 95       	ret

00000072 <change_DDR_depends>:
}

void change_DDR_depends()
{
	bool state = read_pin(INPUT_PIN);
  72:	87 e0       	ldi	r24, 0x07	; 7
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <read_pin>
	
	change_DDR(CHANGED_PIN, state);
  78:	68 2f       	mov	r22, r24
  7a:	84 e0       	ldi	r24, 0x04	; 4
  7c:	0e 94 4a 00 	call	0x94	; 0x94 <change_DDR>
  80:	08 95       	ret

00000082 <main>:
#include <avr/io.h>
#include "./ECU/PortChanger.h"

int main(void)
{
	init_port_changer();
  82:	0e 94 36 00 	call	0x6c	; 0x6c <init_port_changer>
	
    while (1) 
    {
		change_DDR_depends();
  86:	0e 94 39 00 	call	0x72	; 0x72 <change_DDR_depends>
  8a:	fd cf       	rjmp	.-6      	; 0x86 <main+0x4>

0000008c <init_port>:

#include "PortChange.h"

void init_port()
{
	DDR_USED &= ~(1 << INPUT_PIN);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	87 bb       	out	0x17, r24	; 23
  92:	08 95       	ret

00000094 <change_DDR>:
}

void change_DDR(uint8_t pin, bool state)
{
	if (state)
  94:	66 23       	and	r22, r22
  96:	21 f0       	breq	.+8      	; 0xa0 <change_DDR+0xc>
	{
		DDR_USED |= (1 << CHANGED_PIN);
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	08 95       	ret
	}
	else
	{
		DDR_USED &= ~(1 << CHANGED_PIN);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	8f 7e       	andi	r24, 0xEF	; 239
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	08 95       	ret

000000a8 <read_pin>:
	}
}

bool read_pin(uint8_t pin)
{
	return (PIN_USED & (1 << INPUT_PIN));
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	88 1f       	adc	r24, r24
  ac:	88 27       	eor	r24, r24
  ae:	88 1f       	adc	r24, r24
  b0:	08 95       	ret

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
