
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000792  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c7e  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e2  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d2  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046d  00000000  00000000  00002aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  64:	0c 94 c7 03 	jmp	0x78e	; 0x78e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <send_command>:

#include "LCD.h"

void send_command(unsigned char cmd)
{
	SCRIPT_PORT = 0x00;
  6c:	12 ba       	out	0x12, r1	; 18
	CONTROL_PORT &= ~(1 << RS);
  6e:	95 b3       	in	r25, 0x15	; 21
  70:	9d 7f       	andi	r25, 0xFD	; 253
  72:	95 bb       	out	0x15, r25	; 21
	SCRIPT_PORT = cmd;	
  74:	82 bb       	out	0x12, r24	; 18
	
	CONTROL_PORT |= (1 << EN);
  76:	85 b3       	in	r24, 0x15	; 21
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	89 ef       	ldi	r24, 0xF9	; 249
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <send_command+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <send_command+0x1a>
  86:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	83 ec       	ldi	r24, 0xC3	; 195
  90:	99 e0       	ldi	r25, 0x09	; 9
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <send_command+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <send_command+0x2c>
  98:	00 00       	nop
  9a:	08 95       	ret

0000009c <init_LCD>:
	_delay_ms(10);
}

void init_LCD()
{
	SCRIPT_DDR = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	81 bb       	out	0x11, r24	; 17
	CONTROL_DDR |= (1 << EN) | (1 << RS);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	84 bb       	out	0x14, r24	; 20
	send_command(0x01);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
	send_command(0x38);
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
	send_command(0x0E);
  b2:	8e e0       	ldi	r24, 0x0E	; 14
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
  b8:	08 95       	ret

000000ba <send_char>:
}

void send_char(char c)
{
	SCRIPT_PORT = 0x00;
  ba:	12 ba       	out	0x12, r1	; 18
	CONTROL_PORT |= (1 << RS);
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	92 60       	ori	r25, 0x02	; 2
  c0:	95 bb       	out	0x15, r25	; 21
	SCRIPT_PORT = c;
  c2:	82 bb       	out	0x12, r24	; 18
	
	CONTROL_PORT |= (1 << EN);
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <send_char+0x14>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <send_char+0x1a>
  d4:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	8e 7f       	andi	r24, 0xFE	; 254
  da:	85 bb       	out	0x15, r24	; 21
  dc:	83 ec       	ldi	r24, 0xC3	; 195
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <send_char+0x26>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <send_char+0x2c>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <send_string>:
	
	_delay_ms(10);
}

void send_string(char s[])
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(s); i++)
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	07 c0       	rjmp	.+14     	; 0x108 <send_string+0x1e>
	{
		send_char(s[i]);
  fa:	f8 01       	movw	r30, r16
  fc:	ec 0f       	add	r30, r28
  fe:	fd 1f       	adc	r31, r29
 100:	80 81       	ld	r24, Z
 102:	0e 94 5d 00 	call	0xba	; 0xba <send_char>
	_delay_ms(10);
}

void send_string(char s[])
{
	for (int i = 0; i < strlen(s); i++)
 106:	21 96       	adiw	r28, 0x01	; 1
 108:	f8 01       	movw	r30, r16
 10a:	01 90       	ld	r0, Z+
 10c:	00 20       	and	r0, r0
 10e:	e9 f7       	brne	.-6      	; 0x10a <send_string+0x20>
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	e0 1b       	sub	r30, r16
 114:	f1 0b       	sbc	r31, r17
 116:	ce 17       	cp	r28, r30
 118:	df 07       	cpc	r29, r31
 11a:	78 f3       	brcs	.-34     	; 0xfa <send_string+0x10>
	{
		send_char(s[i]);
	}
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <send_int>:

void send_int(int i)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	61 97       	sbiw	r28, 0x11	; 17
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 13a:	4a e0       	ldi	r20, 0x0A	; 10
 13c:	be 01       	movw	r22, r28
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	0e 94 92 03 	call	0x724	; 0x724 <__itoa_ncheck>
	char s[17];
	itoa(i, s, 10);
	send_string(s);
 146:	ce 01       	movw	r24, r28
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	0e 94 75 00 	call	0xea	; 0xea <send_string>
}
 14e:	61 96       	adiw	r28, 0x11	; 17
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <send_float>:

void send_float(float n)
{
 160:	8f 92       	push	r8
 162:	9f 92       	push	r9
 164:	af 92       	push	r10
 166:	bf 92       	push	r11
 168:	cf 92       	push	r12
 16a:	df 92       	push	r13
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	cf 93       	push	r28
 172:	6b 01       	movw	r12, r22
 174:	7c 01       	movw	r14, r24
	// Extract integer part
	char sign = 0;
	if (n < 0) {sign = 1; n *= -1;}
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	a9 01       	movw	r20, r18
 17c:	0e 94 c6 01 	call	0x38c	; 0x38c <__cmpsf2>
 180:	88 23       	and	r24, r24
 182:	34 f4       	brge	.+12     	; 0x190 <send_float+0x30>
 184:	f7 fa       	bst	r15, 7
 186:	f0 94       	com	r15
 188:	f7 f8       	bld	r15, 7
 18a:	f0 94       	com	r15
 18c:	c1 e0       	ldi	r28, 0x01	; 1
 18e:	01 c0       	rjmp	.+2      	; 0x192 <send_float+0x32>
}

void send_float(float n)
{
	// Extract integer part
	char sign = 0;
 190:	c0 e0       	ldi	r28, 0x00	; 0
	if (n < 0) {sign = 1; n *= -1;}
	char ipart = (int)n;
 192:	c7 01       	movw	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	0e 94 3d 02 	call	0x47a	; 0x47a <__fixsfsi>
 19a:	4b 01       	movw	r8, r22
 19c:	5c 01       	movw	r10, r24
	
	// Extract floating part
	char fpart = (n - (float)ipart) * 100;
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__floatunsisf>
 1a8:	9b 01       	movw	r18, r22
 1aa:	ac 01       	movw	r20, r24
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__subsf3>
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	48 ec       	ldi	r20, 0xC8	; 200
 1ba:	52 e4       	ldi	r21, 0x42	; 66
 1bc:	0e 94 25 03 	call	0x64a	; 0x64a <__mulsf3>
 1c0:	0e 94 44 02 	call	0x488	; 0x488 <__fixunssfsi>
 1c4:	f6 2e       	mov	r15, r22
	if (sign == 1) send_char('-');
 1c6:	c1 30       	cpi	r28, 0x01	; 1
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <send_float+0x70>
 1ca:	8d e2       	ldi	r24, 0x2D	; 45
 1cc:	0e 94 5d 00 	call	0xba	; 0xba <send_char>
	send_int(ipart);
 1d0:	c4 01       	movw	r24, r8
 1d2:	99 27       	eor	r25, r25
 1d4:	0e 94 93 00 	call	0x126	; 0x126 <send_int>
	if (fpart == 0) return;
 1d8:	ff 20       	and	r15, r15
 1da:	39 f0       	breq	.+14     	; 0x1ea <send_float+0x8a>
	send_char('.');
 1dc:	8e e2       	ldi	r24, 0x2E	; 46
 1de:	0e 94 5d 00 	call	0xba	; 0xba <send_char>
	send_int(fpart);
 1e2:	8f 2d       	mov	r24, r15
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 93 00 	call	0x126	; 0x126 <send_int>
 1ea:	cf 91       	pop	r28
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	08 95       	ret

000001fe <init_lm35>:
#include "LM35.h"
#include "./../../MCAL/ADC/ADC.h"

void init_lm35()
{
	adc_init();
 1fe:	0e 94 31 01 	call	0x262	; 0x262 <adc_init>
 202:	08 95       	ret

00000204 <read_lm35>:
}

uint16_t read_lm35()
{
	return adc_read(READ_PIN) * 4.88 / 10;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 38 01 	call	0x270	; 0x270 <adc_read>
 20a:	bc 01       	movw	r22, r24
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__floatunsisf>
 214:	26 ef       	ldi	r18, 0xF6	; 246
 216:	38 e2       	ldi	r19, 0x28	; 40
 218:	4c e9       	ldi	r20, 0x9C	; 156
 21a:	50 e4       	ldi	r21, 0x40	; 64
 21c:	0e 94 25 03 	call	0x64a	; 0x64a <__mulsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e2       	ldi	r20, 0x20	; 32
 226:	51 e4       	ldi	r21, 0x41	; 65
 228:	0e 94 cb 01 	call	0x396	; 0x396 <__divsf3>
 22c:	0e 94 44 02 	call	0x488	; 0x488 <__fixunssfsi>
 230:	cb 01       	movw	r24, r22
 232:	08 95       	ret

00000234 <main>:
	GICR |= 1 << INT0 | 1 << INT1 | 1 << INT2;
	MCUCR |= 1 << ISC00 | 1 << ISC10 | 1 << ISC11;
	MCUCR &= ~(1<<ISC01);
	MCUCSR |= 1 << ISC2;
	sei();*/
	init_lm35();
 234:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_lm35>
	init_LCD();
 238:	0e 94 4e 00 	call	0x9c	; 0x9c <init_LCD>
	
    while (1) 
    {
		send_float(read_lm35());
 23c:	0e 94 02 01 	call	0x204	; 0x204 <read_lm35>
 240:	bc 01       	movw	r22, r24
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__floatunsisf>
 24a:	0e 94 b0 00 	call	0x160	; 0x160 <send_float>
 24e:	87 ea       	ldi	r24, 0xA7	; 167
 250:	91 e6       	ldi	r25, 0x61	; 97
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x1e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x24>
 258:	00 00       	nop
		_delay_ms(100);
		send_command(0x01);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
 260:	ed cf       	rjmp	.-38     	; 0x23c <main+0x8>

00000262 <adc_init>:

#include "ADC.h"

void adc_init()
{
	ADMUX |= 1 << REFS0;
 262:	87 b1       	in	r24, 0x07	; 7
 264:	80 64       	ori	r24, 0x40	; 64
 266:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1 << ADEN | 1 << ADPS2;
 268:	86 b1       	in	r24, 0x06	; 6
 26a:	84 68       	ori	r24, 0x84	; 132
 26c:	86 b9       	out	0x06, r24	; 6
 26e:	08 95       	ret

00000270 <adc_read>:

uint16_t adc_read(unsigned char read_pin)
{
	uint16_t ainL;
	uint16_t ainH;
	ADMUX &= 0xF0;
 270:	97 b1       	in	r25, 0x07	; 7
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	97 b9       	out	0x07, r25	; 7
	ADMUX |= 0x0F & (read_pin);
 276:	97 b1       	in	r25, 0x07	; 7
 278:	28 2f       	mov	r18, r24
 27a:	2f 70       	andi	r18, 0x0F	; 15
 27c:	92 2b       	or	r25, r18
 27e:	97 b9       	out	0x07, r25	; 7
	DDRA &= ~(1 << read_pin);
 280:	4a b3       	in	r20, 0x1a	; 26
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <adc_read+0x1e>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <adc_read+0x1a>
 292:	cb 01       	movw	r24, r22
 294:	80 95       	com	r24
 296:	84 23       	and	r24, r20
 298:	8a bb       	out	0x1a, r24	; 26
	
	ADCSRA |= 1 << ADSC;
 29a:	86 b1       	in	r24, 0x06	; 6
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & (1 << ADIF)) == 0);
 2a0:	34 9b       	sbis	0x06, 4	; 6
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <adc_read+0x30>
	ainL = ADCL;
 2a4:	24 b1       	in	r18, 0x04	; 4
	ainH = ADCH << 8;
 2a6:	35 b1       	in	r19, 0x05	; 5
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	93 2f       	mov	r25, r19
	return ainH + ainL;
 2ac:	82 0f       	add	r24, r18
 2ae:	91 1d       	adc	r25, r1
 2b0:	08 95       	ret

000002b2 <__subsf3>:
 2b2:	50 58       	subi	r21, 0x80	; 128

000002b4 <__addsf3>:
 2b4:	bb 27       	eor	r27, r27
 2b6:	aa 27       	eor	r26, r26
 2b8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__addsf3x>
 2bc:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 2c0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 2c4:	38 f0       	brcs	.+14     	; 0x2d4 <__addsf3+0x20>
 2c6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__addsf3+0x20>
 2cc:	39 f4       	brne	.+14     	; 0x2dc <__addsf3+0x28>
 2ce:	9f 3f       	cpi	r25, 0xFF	; 255
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <__addsf3+0x24>
 2d2:	26 f4       	brtc	.+8      	; 0x2dc <__addsf3+0x28>
 2d4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>
 2d8:	0e f4       	brtc	.+2      	; 0x2dc <__addsf3+0x28>
 2da:	e0 95       	com	r30
 2dc:	e7 fb       	bst	r30, 7
 2de:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>

000002e2 <__addsf3x>:
 2e2:	e9 2f       	mov	r30, r25
 2e4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 2e8:	58 f3       	brcs	.-42     	; 0x2c0 <__addsf3+0xc>
 2ea:	ba 17       	cp	r27, r26
 2ec:	62 07       	cpc	r22, r18
 2ee:	73 07       	cpc	r23, r19
 2f0:	84 07       	cpc	r24, r20
 2f2:	95 07       	cpc	r25, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__addsf3x+0x1c>
 2f6:	79 f4       	brne	.+30     	; 0x316 <__addsf3x+0x34>
 2f8:	a6 f5       	brtc	.+104    	; 0x362 <__addsf3x+0x80>
 2fa:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_zero>
 2fe:	0e f4       	brtc	.+2      	; 0x302 <__addsf3x+0x20>
 300:	e0 95       	com	r30
 302:	0b 2e       	mov	r0, r27
 304:	ba 2f       	mov	r27, r26
 306:	a0 2d       	mov	r26, r0
 308:	0b 01       	movw	r0, r22
 30a:	b9 01       	movw	r22, r18
 30c:	90 01       	movw	r18, r0
 30e:	0c 01       	movw	r0, r24
 310:	ca 01       	movw	r24, r20
 312:	a0 01       	movw	r20, r0
 314:	11 24       	eor	r1, r1
 316:	ff 27       	eor	r31, r31
 318:	59 1b       	sub	r21, r25
 31a:	99 f0       	breq	.+38     	; 0x342 <__addsf3x+0x60>
 31c:	59 3f       	cpi	r21, 0xF9	; 249
 31e:	50 f4       	brcc	.+20     	; 0x334 <__addsf3x+0x52>
 320:	50 3e       	cpi	r21, 0xE0	; 224
 322:	68 f1       	brcs	.+90     	; 0x37e <__addsf3x+0x9c>
 324:	1a 16       	cp	r1, r26
 326:	f0 40       	sbci	r31, 0x00	; 0
 328:	a2 2f       	mov	r26, r18
 32a:	23 2f       	mov	r18, r19
 32c:	34 2f       	mov	r19, r20
 32e:	44 27       	eor	r20, r20
 330:	58 5f       	subi	r21, 0xF8	; 248
 332:	f3 cf       	rjmp	.-26     	; 0x31a <__addsf3x+0x38>
 334:	46 95       	lsr	r20
 336:	37 95       	ror	r19
 338:	27 95       	ror	r18
 33a:	a7 95       	ror	r26
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	53 95       	inc	r21
 340:	c9 f7       	brne	.-14     	; 0x334 <__addsf3x+0x52>
 342:	7e f4       	brtc	.+30     	; 0x362 <__addsf3x+0x80>
 344:	1f 16       	cp	r1, r31
 346:	ba 0b       	sbc	r27, r26
 348:	62 0b       	sbc	r22, r18
 34a:	73 0b       	sbc	r23, r19
 34c:	84 0b       	sbc	r24, r20
 34e:	ba f0       	brmi	.+46     	; 0x37e <__addsf3x+0x9c>
 350:	91 50       	subi	r25, 0x01	; 1
 352:	a1 f0       	breq	.+40     	; 0x37c <__addsf3x+0x9a>
 354:	ff 0f       	add	r31, r31
 356:	bb 1f       	adc	r27, r27
 358:	66 1f       	adc	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	c2 f7       	brpl	.-16     	; 0x350 <__addsf3x+0x6e>
 360:	0e c0       	rjmp	.+28     	; 0x37e <__addsf3x+0x9c>
 362:	ba 0f       	add	r27, r26
 364:	62 1f       	adc	r22, r18
 366:	73 1f       	adc	r23, r19
 368:	84 1f       	adc	r24, r20
 36a:	48 f4       	brcc	.+18     	; 0x37e <__addsf3x+0x9c>
 36c:	87 95       	ror	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f7 95       	ror	r31
 376:	9e 3f       	cpi	r25, 0xFE	; 254
 378:	08 f0       	brcs	.+2      	; 0x37c <__addsf3x+0x9a>
 37a:	b0 cf       	rjmp	.-160    	; 0x2dc <__addsf3+0x28>
 37c:	93 95       	inc	r25
 37e:	88 0f       	add	r24, r24
 380:	08 f0       	brcs	.+2      	; 0x384 <__addsf3x+0xa2>
 382:	99 27       	eor	r25, r25
 384:	ee 0f       	add	r30, r30
 386:	97 95       	ror	r25
 388:	87 95       	ror	r24
 38a:	08 95       	ret

0000038c <__cmpsf2>:
 38c:	0e 94 b0 02 	call	0x560	; 0x560 <__fp_cmp>
 390:	08 f4       	brcc	.+2      	; 0x394 <__cmpsf2+0x8>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret

00000396 <__divsf3>:
 396:	0e 94 df 01 	call	0x3be	; 0x3be <__divsf3x>
 39a:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 39e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 3a2:	58 f0       	brcs	.+22     	; 0x3ba <__divsf3+0x24>
 3a4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 3a8:	40 f0       	brcs	.+16     	; 0x3ba <__divsf3+0x24>
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <__divsf3+0x20>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	29 f0       	breq	.+10     	; 0x3ba <__divsf3+0x24>
 3b0:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 3b4:	51 11       	cpse	r21, r1
 3b6:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 3ba:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>

000003be <__divsf3x>:
 3be:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 3c2:	68 f3       	brcs	.-38     	; 0x39e <__divsf3+0x8>

000003c4 <__divsf3_pse>:
 3c4:	99 23       	and	r25, r25
 3c6:	b1 f3       	breq	.-20     	; 0x3b4 <__divsf3+0x1e>
 3c8:	55 23       	and	r21, r21
 3ca:	91 f3       	breq	.-28     	; 0x3b0 <__divsf3+0x1a>
 3cc:	95 1b       	sub	r25, r21
 3ce:	55 0b       	sbc	r21, r21
 3d0:	bb 27       	eor	r27, r27
 3d2:	aa 27       	eor	r26, r26
 3d4:	62 17       	cp	r22, r18
 3d6:	73 07       	cpc	r23, r19
 3d8:	84 07       	cpc	r24, r20
 3da:	38 f0       	brcs	.+14     	; 0x3ea <__divsf3_pse+0x26>
 3dc:	9f 5f       	subi	r25, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	44 1f       	adc	r20, r20
 3e6:	aa 1f       	adc	r26, r26
 3e8:	a9 f3       	breq	.-22     	; 0x3d4 <__divsf3_pse+0x10>
 3ea:	35 d0       	rcall	.+106    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 3ec:	0e 2e       	mov	r0, r30
 3ee:	3a f0       	brmi	.+14     	; 0x3fe <__divsf3_pse+0x3a>
 3f0:	e0 e8       	ldi	r30, 0x80	; 128
 3f2:	32 d0       	rcall	.+100    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	e6 95       	lsr	r30
 3fa:	00 1c       	adc	r0, r0
 3fc:	ca f7       	brpl	.-14     	; 0x3f0 <__divsf3_pse+0x2c>
 3fe:	2b d0       	rcall	.+86     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 400:	fe 2f       	mov	r31, r30
 402:	29 d0       	rcall	.+82     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	88 1f       	adc	r24, r24
 40a:	bb 1f       	adc	r27, r27
 40c:	26 17       	cp	r18, r22
 40e:	37 07       	cpc	r19, r23
 410:	48 07       	cpc	r20, r24
 412:	ab 07       	cpc	r26, r27
 414:	b0 e8       	ldi	r27, 0x80	; 128
 416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	bb 0b       	sbc	r27, r27
 41a:	80 2d       	mov	r24, r0
 41c:	bf 01       	movw	r22, r30
 41e:	ff 27       	eor	r31, r31
 420:	93 58       	subi	r25, 0x83	; 131
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	3a f0       	brmi	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 426:	9e 3f       	cpi	r25, 0xFE	; 254
 428:	51 05       	cpc	r21, r1
 42a:	78 f0       	brcs	.+30     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 42c:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 430:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	e4 f3       	brlt	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	98 3e       	cpi	r25, 0xE8	; 232
 43a:	d4 f3       	brlt	.-12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 43c:	86 95       	lsr	r24
 43e:	77 95       	ror	r23
 440:	67 95       	ror	r22
 442:	b7 95       	ror	r27
 444:	f7 95       	ror	r31
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	c9 f7       	brne	.-14     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 44a:	88 0f       	add	r24, r24
 44c:	91 1d       	adc	r25, r1
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret
 456:	e1 e0       	ldi	r30, 0x01	; 1
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	bb 1f       	adc	r27, r27
 460:	62 17       	cp	r22, r18
 462:	73 07       	cpc	r23, r19
 464:	84 07       	cpc	r24, r20
 466:	ba 07       	cpc	r27, r26
 468:	20 f0       	brcs	.+8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46a:	62 1b       	sub	r22, r18
 46c:	73 0b       	sbc	r23, r19
 46e:	84 0b       	sbc	r24, r20
 470:	ba 0b       	sbc	r27, r26
 472:	ee 1f       	adc	r30, r30
 474:	88 f7       	brcc	.-30     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 476:	e0 95       	com	r30
 478:	08 95       	ret

0000047a <__fixsfsi>:
 47a:	0e 94 44 02 	call	0x488	; 0x488 <__fixunssfsi>
 47e:	68 94       	set
 480:	b1 11       	cpse	r27, r1
 482:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 486:	08 95       	ret

00000488 <__fixunssfsi>:
 488:	0e 94 04 03 	call	0x608	; 0x608 <__fp_splitA>
 48c:	88 f0       	brcs	.+34     	; 0x4b0 <__fixunssfsi+0x28>
 48e:	9f 57       	subi	r25, 0x7F	; 127
 490:	98 f0       	brcs	.+38     	; 0x4b8 <__fixunssfsi+0x30>
 492:	b9 2f       	mov	r27, r25
 494:	99 27       	eor	r25, r25
 496:	b7 51       	subi	r27, 0x17	; 23
 498:	b0 f0       	brcs	.+44     	; 0x4c6 <__fixunssfsi+0x3e>
 49a:	e1 f0       	breq	.+56     	; 0x4d4 <__fixunssfsi+0x4c>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	1a f0       	brmi	.+6      	; 0x4ac <__fixunssfsi+0x24>
 4a6:	ba 95       	dec	r27
 4a8:	c9 f7       	brne	.-14     	; 0x49c <__fixunssfsi+0x14>
 4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <__fixunssfsi+0x4c>
 4ac:	b1 30       	cpi	r27, 0x01	; 1
 4ae:	91 f0       	breq	.+36     	; 0x4d4 <__fixunssfsi+0x4c>
 4b0:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_zero>
 4b4:	b1 e0       	ldi	r27, 0x01	; 1
 4b6:	08 95       	ret
 4b8:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_zero>
 4bc:	67 2f       	mov	r22, r23
 4be:	78 2f       	mov	r23, r24
 4c0:	88 27       	eor	r24, r24
 4c2:	b8 5f       	subi	r27, 0xF8	; 248
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <__fixunssfsi+0x4c>
 4c6:	b9 3f       	cpi	r27, 0xF9	; 249
 4c8:	cc f3       	brlt	.-14     	; 0x4bc <__fixunssfsi+0x34>
 4ca:	86 95       	lsr	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b3 95       	inc	r27
 4d2:	d9 f7       	brne	.-10     	; 0x4ca <__fixunssfsi+0x42>
 4d4:	3e f4       	brtc	.+14     	; 0x4e4 <__fixunssfsi+0x5c>
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__floatunsisf>:
 4e6:	e8 94       	clt
 4e8:	09 c0       	rjmp	.+18     	; 0x4fc <__floatsisf+0x12>

000004ea <__floatsisf>:
 4ea:	97 fb       	bst	r25, 7
 4ec:	3e f4       	brtc	.+14     	; 0x4fc <__floatsisf+0x12>
 4ee:	90 95       	com	r25
 4f0:	80 95       	com	r24
 4f2:	70 95       	com	r23
 4f4:	61 95       	neg	r22
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	99 23       	and	r25, r25
 4fe:	a9 f0       	breq	.+42     	; 0x52a <__floatsisf+0x40>
 500:	f9 2f       	mov	r31, r25
 502:	96 e9       	ldi	r25, 0x96	; 150
 504:	bb 27       	eor	r27, r27
 506:	93 95       	inc	r25
 508:	f6 95       	lsr	r31
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f1 11       	cpse	r31, r1
 514:	f8 cf       	rjmp	.-16     	; 0x506 <__floatsisf+0x1c>
 516:	fa f4       	brpl	.+62     	; 0x556 <__floatsisf+0x6c>
 518:	bb 0f       	add	r27, r27
 51a:	11 f4       	brne	.+4      	; 0x520 <__floatsisf+0x36>
 51c:	60 ff       	sbrs	r22, 0
 51e:	1b c0       	rjmp	.+54     	; 0x556 <__floatsisf+0x6c>
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	16 c0       	rjmp	.+44     	; 0x556 <__floatsisf+0x6c>
 52a:	88 23       	and	r24, r24
 52c:	11 f0       	breq	.+4      	; 0x532 <__floatsisf+0x48>
 52e:	96 e9       	ldi	r25, 0x96	; 150
 530:	11 c0       	rjmp	.+34     	; 0x554 <__floatsisf+0x6a>
 532:	77 23       	and	r23, r23
 534:	21 f0       	breq	.+8      	; 0x53e <__floatsisf+0x54>
 536:	9e e8       	ldi	r25, 0x8E	; 142
 538:	87 2f       	mov	r24, r23
 53a:	76 2f       	mov	r23, r22
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__floatsisf+0x5e>
 53e:	66 23       	and	r22, r22
 540:	71 f0       	breq	.+28     	; 0x55e <__floatsisf+0x74>
 542:	96 e8       	ldi	r25, 0x86	; 134
 544:	86 2f       	mov	r24, r22
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	2a f0       	brmi	.+10     	; 0x556 <__floatsisf+0x6c>
 54c:	9a 95       	dec	r25
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	da f7       	brpl	.-10     	; 0x54c <__floatsisf+0x62>
 556:	88 0f       	add	r24, r24
 558:	96 95       	lsr	r25
 55a:	87 95       	ror	r24
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__fp_cmp>:
 560:	99 0f       	add	r25, r25
 562:	00 08       	sbc	r0, r0
 564:	55 0f       	add	r21, r21
 566:	aa 0b       	sbc	r26, r26
 568:	e0 e8       	ldi	r30, 0x80	; 128
 56a:	fe ef       	ldi	r31, 0xFE	; 254
 56c:	16 16       	cp	r1, r22
 56e:	17 06       	cpc	r1, r23
 570:	e8 07       	cpc	r30, r24
 572:	f9 07       	cpc	r31, r25
 574:	c0 f0       	brcs	.+48     	; 0x5a6 <__fp_cmp+0x46>
 576:	12 16       	cp	r1, r18
 578:	13 06       	cpc	r1, r19
 57a:	e4 07       	cpc	r30, r20
 57c:	f5 07       	cpc	r31, r21
 57e:	98 f0       	brcs	.+38     	; 0x5a6 <__fp_cmp+0x46>
 580:	62 1b       	sub	r22, r18
 582:	73 0b       	sbc	r23, r19
 584:	84 0b       	sbc	r24, r20
 586:	95 0b       	sbc	r25, r21
 588:	39 f4       	brne	.+14     	; 0x598 <__fp_cmp+0x38>
 58a:	0a 26       	eor	r0, r26
 58c:	61 f0       	breq	.+24     	; 0x5a6 <__fp_cmp+0x46>
 58e:	23 2b       	or	r18, r19
 590:	24 2b       	or	r18, r20
 592:	25 2b       	or	r18, r21
 594:	21 f4       	brne	.+8      	; 0x59e <__fp_cmp+0x3e>
 596:	08 95       	ret
 598:	0a 26       	eor	r0, r26
 59a:	09 f4       	brne	.+2      	; 0x59e <__fp_cmp+0x3e>
 59c:	a1 40       	sbci	r26, 0x01	; 1
 59e:	a6 95       	lsr	r26
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	81 1d       	adc	r24, r1
 5a4:	81 1d       	adc	r24, r1
 5a6:	08 95       	ret

000005a8 <__fp_inf>:
 5a8:	97 f9       	bld	r25, 7
 5aa:	9f 67       	ori	r25, 0x7F	; 127
 5ac:	80 e8       	ldi	r24, 0x80	; 128
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	08 95       	ret

000005b4 <__fp_nan>:
 5b4:	9f ef       	ldi	r25, 0xFF	; 255
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	08 95       	ret

000005ba <__fp_pscA>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	16 16       	cp	r1, r22
 5c0:	17 06       	cpc	r1, r23
 5c2:	18 06       	cpc	r1, r24
 5c4:	09 06       	cpc	r0, r25
 5c6:	08 95       	ret

000005c8 <__fp_pscB>:
 5c8:	00 24       	eor	r0, r0
 5ca:	0a 94       	dec	r0
 5cc:	12 16       	cp	r1, r18
 5ce:	13 06       	cpc	r1, r19
 5d0:	14 06       	cpc	r1, r20
 5d2:	05 06       	cpc	r0, r21
 5d4:	08 95       	ret

000005d6 <__fp_round>:
 5d6:	09 2e       	mov	r0, r25
 5d8:	03 94       	inc	r0
 5da:	00 0c       	add	r0, r0
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__fp_round+0xc>
 5de:	88 23       	and	r24, r24
 5e0:	52 f0       	brmi	.+20     	; 0x5f6 <__fp_round+0x20>
 5e2:	bb 0f       	add	r27, r27
 5e4:	40 f4       	brcc	.+16     	; 0x5f6 <__fp_round+0x20>
 5e6:	bf 2b       	or	r27, r31
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0x18>
 5ea:	60 ff       	sbrs	r22, 0
 5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <__fp_round+0x20>
 5ee:	6f 5f       	subi	r22, 0xFF	; 255
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__fp_split3>:
 5f8:	57 fd       	sbrc	r21, 7
 5fa:	90 58       	subi	r25, 0x80	; 128
 5fc:	44 0f       	add	r20, r20
 5fe:	55 1f       	adc	r21, r21
 600:	59 f0       	breq	.+22     	; 0x618 <__fp_splitA+0x10>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	71 f0       	breq	.+28     	; 0x622 <__fp_splitA+0x1a>
 606:	47 95       	ror	r20

00000608 <__fp_splitA>:
 608:	88 0f       	add	r24, r24
 60a:	97 fb       	bst	r25, 7
 60c:	99 1f       	adc	r25, r25
 60e:	61 f0       	breq	.+24     	; 0x628 <__fp_splitA+0x20>
 610:	9f 3f       	cpi	r25, 0xFF	; 255
 612:	79 f0       	breq	.+30     	; 0x632 <__fp_splitA+0x2a>
 614:	87 95       	ror	r24
 616:	08 95       	ret
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	14 06       	cpc	r1, r20
 61e:	55 1f       	adc	r21, r21
 620:	f2 cf       	rjmp	.-28     	; 0x606 <__fp_split3+0xe>
 622:	46 95       	lsr	r20
 624:	f1 df       	rcall	.-30     	; 0x608 <__fp_splitA>
 626:	08 c0       	rjmp	.+16     	; 0x638 <__fp_splitA+0x30>
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	99 1f       	adc	r25, r25
 630:	f1 cf       	rjmp	.-30     	; 0x614 <__fp_splitA+0xc>
 632:	86 95       	lsr	r24
 634:	71 05       	cpc	r23, r1
 636:	61 05       	cpc	r22, r1
 638:	08 94       	sec
 63a:	08 95       	ret

0000063c <__fp_zero>:
 63c:	e8 94       	clt

0000063e <__fp_szero>:
 63e:	bb 27       	eor	r27, r27
 640:	66 27       	eor	r22, r22
 642:	77 27       	eor	r23, r23
 644:	cb 01       	movw	r24, r22
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__mulsf3>:
 64a:	0e 94 38 03 	call	0x670	; 0x670 <__mulsf3x>
 64e:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_round>
 652:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__fp_pscA>
 656:	38 f0       	brcs	.+14     	; 0x666 <__mulsf3+0x1c>
 658:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_pscB>
 65c:	20 f0       	brcs	.+8      	; 0x666 <__mulsf3+0x1c>
 65e:	95 23       	and	r25, r21
 660:	11 f0       	breq	.+4      	; 0x666 <__mulsf3+0x1c>
 662:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 666:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__fp_nan>
 66a:	11 24       	eor	r1, r1
 66c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>

00000670 <__mulsf3x>:
 670:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__fp_split3>
 674:	70 f3       	brcs	.-36     	; 0x652 <__mulsf3+0x8>

00000676 <__mulsf3_pse>:
 676:	95 9f       	mul	r25, r21
 678:	c1 f3       	breq	.-16     	; 0x66a <__mulsf3+0x20>
 67a:	95 0f       	add	r25, r21
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	55 1f       	adc	r21, r21
 680:	62 9f       	mul	r22, r18
 682:	f0 01       	movw	r30, r0
 684:	72 9f       	mul	r23, r18
 686:	bb 27       	eor	r27, r27
 688:	f0 0d       	add	r31, r0
 68a:	b1 1d       	adc	r27, r1
 68c:	63 9f       	mul	r22, r19
 68e:	aa 27       	eor	r26, r26
 690:	f0 0d       	add	r31, r0
 692:	b1 1d       	adc	r27, r1
 694:	aa 1f       	adc	r26, r26
 696:	64 9f       	mul	r22, r20
 698:	66 27       	eor	r22, r22
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	66 1f       	adc	r22, r22
 6a0:	82 9f       	mul	r24, r18
 6a2:	22 27       	eor	r18, r18
 6a4:	b0 0d       	add	r27, r0
 6a6:	a1 1d       	adc	r26, r1
 6a8:	62 1f       	adc	r22, r18
 6aa:	73 9f       	mul	r23, r19
 6ac:	b0 0d       	add	r27, r0
 6ae:	a1 1d       	adc	r26, r1
 6b0:	62 1f       	adc	r22, r18
 6b2:	83 9f       	mul	r24, r19
 6b4:	a0 0d       	add	r26, r0
 6b6:	61 1d       	adc	r22, r1
 6b8:	22 1f       	adc	r18, r18
 6ba:	74 9f       	mul	r23, r20
 6bc:	33 27       	eor	r19, r19
 6be:	a0 0d       	add	r26, r0
 6c0:	61 1d       	adc	r22, r1
 6c2:	23 1f       	adc	r18, r19
 6c4:	84 9f       	mul	r24, r20
 6c6:	60 0d       	add	r22, r0
 6c8:	21 1d       	adc	r18, r1
 6ca:	82 2f       	mov	r24, r18
 6cc:	76 2f       	mov	r23, r22
 6ce:	6a 2f       	mov	r22, r26
 6d0:	11 24       	eor	r1, r1
 6d2:	9f 57       	subi	r25, 0x7F	; 127
 6d4:	50 40       	sbci	r21, 0x00	; 0
 6d6:	9a f0       	brmi	.+38     	; 0x6fe <__mulsf3_pse+0x88>
 6d8:	f1 f0       	breq	.+60     	; 0x716 <__mulsf3_pse+0xa0>
 6da:	88 23       	and	r24, r24
 6dc:	4a f0       	brmi	.+18     	; 0x6f0 <__mulsf3_pse+0x7a>
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	bb 1f       	adc	r27, r27
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	91 50       	subi	r25, 0x01	; 1
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	a9 f7       	brne	.-22     	; 0x6da <__mulsf3_pse+0x64>
 6f0:	9e 3f       	cpi	r25, 0xFE	; 254
 6f2:	51 05       	cpc	r21, r1
 6f4:	80 f0       	brcs	.+32     	; 0x716 <__mulsf3_pse+0xa0>
 6f6:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_inf>
 6fa:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_szero>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	e4 f3       	brlt	.-8      	; 0x6fa <__mulsf3_pse+0x84>
 702:	98 3e       	cpi	r25, 0xE8	; 232
 704:	d4 f3       	brlt	.-12     	; 0x6fa <__mulsf3_pse+0x84>
 706:	86 95       	lsr	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b7 95       	ror	r27
 70e:	f7 95       	ror	r31
 710:	e7 95       	ror	r30
 712:	9f 5f       	subi	r25, 0xFF	; 255
 714:	c1 f7       	brne	.-16     	; 0x706 <__mulsf3_pse+0x90>
 716:	fe 2b       	or	r31, r30
 718:	88 0f       	add	r24, r24
 71a:	91 1d       	adc	r25, r1
 71c:	96 95       	lsr	r25
 71e:	87 95       	ror	r24
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__itoa_ncheck>:
 724:	bb 27       	eor	r27, r27
 726:	4a 30       	cpi	r20, 0x0A	; 10
 728:	31 f4       	brne	.+12     	; 0x736 <__itoa_ncheck+0x12>
 72a:	99 23       	and	r25, r25
 72c:	22 f4       	brpl	.+8      	; 0x736 <__itoa_ncheck+0x12>
 72e:	bd e2       	ldi	r27, 0x2D	; 45
 730:	90 95       	com	r25
 732:	81 95       	neg	r24
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__utoa_common>

0000073a <__utoa_ncheck>:
 73a:	bb 27       	eor	r27, r27

0000073c <__utoa_common>:
 73c:	fb 01       	movw	r30, r22
 73e:	55 27       	eor	r21, r21
 740:	aa 27       	eor	r26, r26
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	aa 1f       	adc	r26, r26
 748:	a4 17       	cp	r26, r20
 74a:	10 f0       	brcs	.+4      	; 0x750 <__utoa_common+0x14>
 74c:	a4 1b       	sub	r26, r20
 74e:	83 95       	inc	r24
 750:	50 51       	subi	r21, 0x10	; 16
 752:	b9 f7       	brne	.-18     	; 0x742 <__utoa_common+0x6>
 754:	a0 5d       	subi	r26, 0xD0	; 208
 756:	aa 33       	cpi	r26, 0x3A	; 58
 758:	08 f0       	brcs	.+2      	; 0x75c <__utoa_common+0x20>
 75a:	a9 5d       	subi	r26, 0xD9	; 217
 75c:	a1 93       	st	Z+, r26
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	79 f7       	brne	.-34     	; 0x740 <__utoa_common+0x4>
 762:	b1 11       	cpse	r27, r1
 764:	b1 93       	st	Z+, r27
 766:	11 92       	st	Z+, r1
 768:	cb 01       	movw	r24, r22
 76a:	0c 94 b7 03 	jmp	0x76e	; 0x76e <strrev>

0000076e <strrev>:
 76e:	dc 01       	movw	r26, r24
 770:	fc 01       	movw	r30, r24
 772:	67 2f       	mov	r22, r23
 774:	71 91       	ld	r23, Z+
 776:	77 23       	and	r23, r23
 778:	e1 f7       	brne	.-8      	; 0x772 <strrev+0x4>
 77a:	32 97       	sbiw	r30, 0x02	; 2
 77c:	04 c0       	rjmp	.+8      	; 0x786 <strrev+0x18>
 77e:	7c 91       	ld	r23, X
 780:	6d 93       	st	X+, r22
 782:	70 83       	st	Z, r23
 784:	62 91       	ld	r22, -Z
 786:	ae 17       	cp	r26, r30
 788:	bf 07       	cpc	r27, r31
 78a:	c8 f3       	brcs	.-14     	; 0x77e <strrev+0x10>
 78c:	08 95       	ret

0000078e <_exit>:
 78e:	f8 94       	cli

00000790 <__stop_program>:
 790:	ff cf       	rjmp	.-2      	; 0x790 <__stop_program>
