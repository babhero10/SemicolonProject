
MQ2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddf  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000909  00000000  00000000  00001203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076f  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000435  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000519  00000000  00000000  00002805  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  64:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <send_command>:
#include <stdlib.h>
#include "LCD4bit.h"

void send_command(uint8_t cmd)
{
	SCRIPT_LCD_PORT &= 0x0F;
  6c:	92 b3       	in	r25, 0x12	; 18
  6e:	9f 70       	andi	r25, 0x0F	; 15
  70:	92 bb       	out	0x12, r25	; 18
	SCRIPT_LCD_PORT |= cmd & 0xF0;
  72:	92 b3       	in	r25, 0x12	; 18
  74:	28 2f       	mov	r18, r24
  76:	20 7f       	andi	r18, 0xF0	; 240
  78:	92 2b       	or	r25, r18
  7a:	92 bb       	out	0x12, r25	; 18
	CONTROL_LCD_PORT &= ~(1 << RS);
  7c:	92 b3       	in	r25, 0x12	; 18
  7e:	9d 7f       	andi	r25, 0xFD	; 253
  80:	92 bb       	out	0x12, r25	; 18
	
	CONTROL_LCD_PORT |= 1 << EN;
  82:	92 b3       	in	r25, 0x12	; 18
  84:	91 60       	ori	r25, 0x01	; 1
  86:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	00 00       	nop
	_delay_us(1);	
	CONTROL_LCD_PORT &= ~(1 << EN);
  8a:	92 b3       	in	r25, 0x12	; 18
  8c:	9e 7f       	andi	r25, 0xFE	; 254
  8e:	92 bb       	out	0x12, r25	; 18
  90:	32 e4       	ldi	r19, 0x42	; 66
  92:	3a 95       	dec	r19
  94:	f1 f7       	brne	.-4      	; 0x92 <send_command+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <send_command+0x2c>
	_delay_us(200);
	SCRIPT_LCD_PORT &= 0x0F;
  98:	92 b3       	in	r25, 0x12	; 18
  9a:	9f 70       	andi	r25, 0x0F	; 15
  9c:	92 bb       	out	0x12, r25	; 18
	SCRIPT_LCD_PORT |= ((cmd << 4) & 0xF0);
  9e:	22 b3       	in	r18, 0x12	; 18
  a0:	30 e1       	ldi	r19, 0x10	; 16
  a2:	83 9f       	mul	r24, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 2b       	or	r24, r18
  aa:	82 bb       	out	0x12, r24	; 18
	
	CONTROL_LCD_PORT |= 1 << EN;
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	00 00       	nop
	_delay_us(1);
	CONTROL_LCD_PORT &= ~(1 << EN);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	83 ec       	ldi	r24, 0xC3	; 195
  bc:	99 e0       	ldi	r25, 0x09	; 9
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <send_command+0x52>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <send_command+0x58>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <init_LCD>:
	_delay_ms(10);
}

void init_LCD()
{
	SCRIPT_LCD_DDR |= 0xF0;
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	81 bb       	out	0x11, r24	; 17
	CONTROL_LCD_DDR |= (1 << EN) | (1 << RS);
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	81 bb       	out	0x11, r24	; 17
	send_command(0x02);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
	send_command(0x28);
  da:	88 e2       	ldi	r24, 0x28	; 40
  dc:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
	send_command(0x01);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
	send_command(0x0C);
  e6:	8c e0       	ldi	r24, 0x0C	; 12
  e8:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
  ec:	83 ef       	ldi	r24, 0xF3	; 243
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <init_LCD+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <init_LCD+0x2e>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <send_char>:
	_delay_ms(2);
}

void send_char(unsigned char c)
{
	SCRIPT_LCD_PORT &= 0x0F;
  fa:	92 b3       	in	r25, 0x12	; 18
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	92 bb       	out	0x12, r25	; 18
	SCRIPT_LCD_PORT |= c & 0xF0;
 100:	92 b3       	in	r25, 0x12	; 18
 102:	28 2f       	mov	r18, r24
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	92 2b       	or	r25, r18
 108:	92 bb       	out	0x12, r25	; 18
	CONTROL_LCD_PORT |= (1 << RS);
 10a:	92 b3       	in	r25, 0x12	; 18
 10c:	92 60       	ori	r25, 0x02	; 2
 10e:	92 bb       	out	0x12, r25	; 18
	
	CONTROL_LCD_PORT |= 1 << EN;
 110:	92 b3       	in	r25, 0x12	; 18
 112:	91 60       	ori	r25, 0x01	; 1
 114:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	00 00       	nop
	_delay_us(1);
	CONTROL_LCD_PORT &= ~(1 << EN);
 118:	92 b3       	in	r25, 0x12	; 18
 11a:	9e 7f       	andi	r25, 0xFE	; 254
 11c:	92 bb       	out	0x12, r25	; 18
	
	SCRIPT_LCD_PORT &= 0x0F;
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	92 bb       	out	0x12, r25	; 18
	SCRIPT_LCD_PORT |= ((c << 4) & 0xF0);
 124:	22 b3       	in	r18, 0x12	; 18
 126:	30 e1       	ldi	r19, 0x10	; 16
 128:	83 9f       	mul	r24, r19
 12a:	c0 01       	movw	r24, r0
 12c:	11 24       	eor	r1, r1
 12e:	82 2b       	or	r24, r18
 130:	82 bb       	out	0x12, r24	; 18
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <send_char+0x3a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <send_char+0x40>
	_delay_us(200);
	CONTROL_LCD_PORT |= 1 << EN;
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	82 bb       	out	0x12, r24	; 18
 140:	00 00       	nop
	_delay_us(1);
	CONTROL_LCD_PORT &= ~(1 << EN);
 142:	82 b3       	in	r24, 0x12	; 18
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	99 e0       	ldi	r25, 0x09	; 9
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <send_char+0x52>
 150:	00 c0       	rjmp	.+0      	; 0x152 <send_char+0x58>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <send_string>:
	
	_delay_ms(10);
}

void send_string(char s[])
{
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	8c 01       	movw	r16, r24
	for (int i = 0; s[i] != '\0'; i++)
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	03 c0       	rjmp	.+6      	; 0x16c <send_string+0x16>
	{
		send_char(s[i]);
 166:	0e 94 7d 00 	call	0xfa	; 0xfa <send_char>
	_delay_ms(10);
}

void send_string(char s[])
{
	for (int i = 0; s[i] != '\0'; i++)
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	f8 01       	movw	r30, r16
 16e:	ec 0f       	add	r30, r28
 170:	fd 1f       	adc	r31, r29
 172:	80 81       	ld	r24, Z
 174:	81 11       	cpse	r24, r1
 176:	f7 cf       	rjmp	.-18     	; 0x166 <send_string+0x10>
	{
		send_char(s[i]);
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <send_int>:

void send_int(int n)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	61 97       	sbiw	r28, 0x11	; 17
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 196:	4a e0       	ldi	r20, 0x0A	; 10
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	0e 94 1e 01 	call	0x23c	; 0x23c <__itoa_ncheck>
	char s[17];
	send_string(itoa(n, s, 10));
 1a2:	0e 94 ab 00 	call	0x156	; 0x156 <send_string>
}
 1a6:	61 96       	adiw	r28, 0x11	; 17
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <init_MQ2>:
#include "MQ2.h"
#include "./../../MCAL/ADC_handler/ADC_handler.h"

void init_MQ2()
{
	init_adc();
 1b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_adc>
 1bc:	08 95       	ret

000001be <read_MQ2>:
}

uint16_t read_MQ2()
{
	return read_adc(MQ2_PIN);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <read_adc>
 1c4:	08 95       	ret

000001c6 <main>:
#include "./ECU/LCD4bit/LCD4bit.h"
#include <util/delay.h>

int main(void)
{
	init_MQ2();
 1c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <init_MQ2>
	init_LCD();
 1ca:	0e 94 64 00 	call	0xc8	; 0xc8 <init_LCD>

    while (1) 
    {
		send_int(read_MQ2());
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <read_MQ2>
 1d2:	0e 94 c1 00 	call	0x182	; 0x182 <send_int>
 1d6:	2f e9       	ldi	r18, 0x9F	; 159
 1d8:	86 e8       	ldi	r24, 0x86	; 134
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x16>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x20>
 1e6:	00 00       	nop
		_delay_ms(500);
		send_command(0x01);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 36 00 	call	0x6c	; 0x6c <send_command>
 1ee:	ef cf       	rjmp	.-34     	; 0x1ce <main+0x8>

000001f0 <init_adc>:
#include <avr/io.h>
#include "ADC_handler.h"

void init_adc() 
{
	ADCSRA |= 1 << ADPS1 | 1 << ADPS0 | 1 << ADEN;
 1f0:	86 b1       	in	r24, 0x06	; 6
 1f2:	83 68       	ori	r24, 0x83	; 131
 1f4:	86 b9       	out	0x06, r24	; 6
	ADMUX |= 1 << REFS0;
 1f6:	87 b1       	in	r24, 0x07	; 7
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	87 b9       	out	0x07, r24	; 7
 1fc:	08 95       	ret

000001fe <read_adc>:
}

uint16_t read_adc(uint8_t readed_pin) 
{
	ADC_DDR &= ~(1 << readed_pin);
 1fe:	9a b3       	in	r25, 0x1a	; 26
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	08 2e       	mov	r0, r24
 206:	02 c0       	rjmp	.+4      	; 0x20c <read_adc+0xe>
 208:	22 0f       	add	r18, r18
 20a:	33 1f       	adc	r19, r19
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <read_adc+0xa>
 210:	20 95       	com	r18
 212:	29 23       	and	r18, r25
 214:	2a bb       	out	0x1a, r18	; 26
	ADMUX &= 0xF0;
 216:	97 b1       	in	r25, 0x07	; 7
 218:	90 7f       	andi	r25, 0xF0	; 240
 21a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (readed_pin & 0x0F);
 21c:	97 b1       	in	r25, 0x07	; 7
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	89 2b       	or	r24, r25
 222:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1 << ADSC;
 224:	86 b1       	in	r24, 0x06	; 6
 226:	80 64       	ori	r24, 0x40	; 64
 228:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & (1 << ADIF)) == 0);
 22a:	34 9b       	sbis	0x06, 4	; 6
 22c:	fe cf       	rjmp	.-4      	; 0x22a <read_adc+0x2c>
	uint8_t Alow = ADCL;
 22e:	24 b1       	in	r18, 0x04	; 4
	uint16_t Ahigh = ADCH << 8;
 230:	35 b1       	in	r19, 0x05	; 5
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	93 2f       	mov	r25, r19
	return (Alow + Ahigh);
 236:	82 0f       	add	r24, r18
 238:	91 1d       	adc	r25, r1
 23a:	08 95       	ret

0000023c <__itoa_ncheck>:
 23c:	bb 27       	eor	r27, r27
 23e:	4a 30       	cpi	r20, 0x0A	; 10
 240:	31 f4       	brne	.+12     	; 0x24e <__itoa_ncheck+0x12>
 242:	99 23       	and	r25, r25
 244:	22 f4       	brpl	.+8      	; 0x24e <__itoa_ncheck+0x12>
 246:	bd e2       	ldi	r27, 0x2D	; 45
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	0c 94 2a 01 	jmp	0x254	; 0x254 <__utoa_common>

00000252 <__utoa_ncheck>:
 252:	bb 27       	eor	r27, r27

00000254 <__utoa_common>:
 254:	fb 01       	movw	r30, r22
 256:	55 27       	eor	r21, r21
 258:	aa 27       	eor	r26, r26
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	aa 1f       	adc	r26, r26
 260:	a4 17       	cp	r26, r20
 262:	10 f0       	brcs	.+4      	; 0x268 <__utoa_common+0x14>
 264:	a4 1b       	sub	r26, r20
 266:	83 95       	inc	r24
 268:	50 51       	subi	r21, 0x10	; 16
 26a:	b9 f7       	brne	.-18     	; 0x25a <__utoa_common+0x6>
 26c:	a0 5d       	subi	r26, 0xD0	; 208
 26e:	aa 33       	cpi	r26, 0x3A	; 58
 270:	08 f0       	brcs	.+2      	; 0x274 <__utoa_common+0x20>
 272:	a9 5d       	subi	r26, 0xD9	; 217
 274:	a1 93       	st	Z+, r26
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	79 f7       	brne	.-34     	; 0x258 <__utoa_common+0x4>
 27a:	b1 11       	cpse	r27, r1
 27c:	b1 93       	st	Z+, r27
 27e:	11 92       	st	Z+, r1
 280:	cb 01       	movw	r24, r22
 282:	0c 94 43 01 	jmp	0x286	; 0x286 <strrev>

00000286 <strrev>:
 286:	dc 01       	movw	r26, r24
 288:	fc 01       	movw	r30, r24
 28a:	67 2f       	mov	r22, r23
 28c:	71 91       	ld	r23, Z+
 28e:	77 23       	and	r23, r23
 290:	e1 f7       	brne	.-8      	; 0x28a <strrev+0x4>
 292:	32 97       	sbiw	r30, 0x02	; 2
 294:	04 c0       	rjmp	.+8      	; 0x29e <strrev+0x18>
 296:	7c 91       	ld	r23, X
 298:	6d 93       	st	X+, r22
 29a:	70 83       	st	Z, r23
 29c:	62 91       	ld	r22, -Z
 29e:	ae 17       	cp	r26, r30
 2a0:	bf 07       	cpc	r27, r31
 2a2:	c8 f3       	brcs	.-14     	; 0x296 <strrev+0x10>
 2a4:	08 95       	ret

000002a6 <_exit>:
 2a6:	f8 94       	cli

000002a8 <__stop_program>:
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <__stop_program>
