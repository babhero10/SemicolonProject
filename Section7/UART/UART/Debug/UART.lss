
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039e  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_terminal>:

#include "Terminal.h"
#include "./../../MCAL/UART/UART.h"

void init_terminal() {
	init_UART();	
  6c:	0e 94 46 00 	call	0x8c	; 0x8c <init_UART>
  70:	08 95       	ret

00000072 <read_terminal>:
}

uint8_t read_terminal() {
	return read_UART();	
  72:	0e 94 59 00 	call	0xb2	; 0xb2 <read_UART>
}
  76:	08 95       	ret

00000078 <send_terminal>:

void send_terminal(uint8_t data) {
	send_UART(data);
  78:	0e 94 5d 00 	call	0xba	; 0xba <send_UART>
  7c:	08 95       	ret

0000007e <main>:

#include "ECU/Terminal/Terminal.h"

int main()
{
	init_terminal();
  7e:	0e 94 36 00 	call	0x6c	; 0x6c <init_terminal>
	
	//UART_SendString("\n\t Echo Test ");	
	while(1)
	{
		send_terminal(read_terminal());
  82:	0e 94 39 00 	call	0x72	; 0x72 <read_terminal>
  86:	0e 94 3c 00 	call	0x78	; 0x78 <send_terminal>
  8a:	fb cf       	rjmp	.-10     	; 0x82 <main+0x4>

0000008c <init_UART>:

#include <avr/io.h>
#include "UART.h"

void init_UART() {
	DDRD &= ~(1 << 0);
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	81 bb       	out	0x11, r24	; 17
	DDRD |= 1 << 1;
  92:	81 b3       	in	r24, 0x11	; 17
  94:	82 60       	ori	r24, 0x02	; 2
  96:	81 bb       	out	0x11, r24	; 17
	
	UCSRA |= (1 << U2X);
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	8b b9       	out	0x0b, r24	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  a4:	80 b5       	in	r24, 0x20	; 32
  a6:	86 68       	ori	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
	UBRRL = 12;
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;
  ae:	10 bc       	out	0x20, r1	; 32
  b0:	08 95       	ret

000000b2 <read_UART>:
}

uint8_t read_UART() {
	while ((UCSRA & (1 << RXC)) == 0);
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <read_UART>
	return UDR;	
  b6:	8c b1       	in	r24, 0x0c	; 12
}
  b8:	08 95       	ret

000000ba <send_UART>:

void send_UART(uint8_t data) {
	while ((UCSRA & (1 << UDRE)) == 0);
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <send_UART>
	UDR = data;
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
