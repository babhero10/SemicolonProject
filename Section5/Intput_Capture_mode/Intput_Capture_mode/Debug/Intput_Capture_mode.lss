
Intput_Capture_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000702  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000734  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c60  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088f  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061e  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000041c  00000000  00000000  000028db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  64:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <init_button>:
#include "./../../MCAL/InputCapture/InputCapture.h"
#include "Button.h"

void init_button()
{
	init_input_capture();
  6c:	0e 94 18 01 	call	0x230	; 0x230 <init_input_capture>
  70:	08 95       	ret

00000072 <read_button>:
}

double read_button()
{
	return read_on_time();
  72:	0e 94 25 01 	call	0x24a	; 0x24a <read_on_time>
  76:	08 95       	ret

00000078 <send_command>:

#include "LCD.h"

void send_command(unsigned char cmd)
{
	SCRIPT_PORT = 0x00;
  78:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT &= ~(1 << RS);
  7a:	92 b3       	in	r25, 0x12	; 18
  7c:	9d 7f       	andi	r25, 0xFD	; 253
  7e:	92 bb       	out	0x12, r25	; 18
	SCRIPT_PORT = cmd;	
  80:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
  82:	82 b3       	in	r24, 0x12	; 18
  84:	81 60       	ori	r24, 0x01	; 1
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <send_command+0x14>
  90:	00 c0       	rjmp	.+0      	; 0x92 <send_command+0x1a>
  92:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	82 bb       	out	0x12, r24	; 18
  9a:	83 ec       	ldi	r24, 0xC3	; 195
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <send_command+0x26>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <send_command+0x2c>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <init_LCD>:
	_delay_ms(10);
}

void init_LCD()
{
	SCRIPT_DDR = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	CONTROL_DDR |= (1 << EN) | (1 << RS);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	81 bb       	out	0x11, r24	; 17
	send_command(0x01);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 3c 00 	call	0x78	; 0x78 <send_command>
	send_command(0x38);
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	0e 94 3c 00 	call	0x78	; 0x78 <send_command>
	send_command(0x0E);
  be:	8e e0       	ldi	r24, 0x0E	; 14
  c0:	0e 94 3c 00 	call	0x78	; 0x78 <send_command>
  c4:	08 95       	ret

000000c6 <send_char>:
}

void send_char(char c)
{
	SCRIPT_PORT = 0x00;
  c6:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT |= (1 << RS);
  c8:	92 b3       	in	r25, 0x12	; 18
  ca:	92 60       	ori	r25, 0x02	; 2
  cc:	92 bb       	out	0x12, r25	; 18
	SCRIPT_PORT = c;
  ce:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <send_char+0x14>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <send_char+0x1a>
  e0:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	82 bb       	out	0x12, r24	; 18
  e8:	83 ec       	ldi	r24, 0xC3	; 195
  ea:	99 e0       	ldi	r25, 0x09	; 9
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <send_char+0x26>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <send_char+0x2c>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <send_string>:
	
	_delay_ms(10);
}

void send_string(char s[])
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(s); i++)
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	07 c0       	rjmp	.+14     	; 0x114 <send_string+0x1e>
	{
		send_char(s[i]);
 106:	f8 01       	movw	r30, r16
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	80 81       	ld	r24, Z
 10e:	0e 94 63 00 	call	0xc6	; 0xc6 <send_char>
	_delay_ms(10);
}

void send_string(char s[])
{
	for (int i = 0; i < strlen(s); i++)
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	f8 01       	movw	r30, r16
 116:	01 90       	ld	r0, Z+
 118:	00 20       	and	r0, r0
 11a:	e9 f7       	brne	.-6      	; 0x116 <send_string+0x20>
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	e0 1b       	sub	r30, r16
 120:	f1 0b       	sbc	r31, r17
 122:	ce 17       	cp	r28, r30
 124:	df 07       	cpc	r29, r31
 126:	78 f3       	brcs	.-34     	; 0x106 <send_string+0x10>
	{
		send_char(s[i]);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <send_int>:

void send_int(int i)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	61 97       	sbiw	r28, 0x11	; 17
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	be 01       	movw	r22, r28
 14a:	6f 5f       	subi	r22, 0xFF	; 255
 14c:	7f 4f       	sbci	r23, 0xFF	; 255
 14e:	0e 94 20 03 	call	0x640	; 0x640 <__itoa_ncheck>
	char s[17];
	itoa(i, s, 10);
	send_string(s);
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	0e 94 7b 00 	call	0xf6	; 0xf6 <send_string>
}
 15a:	61 96       	adiw	r28, 0x11	; 17
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <send_float>:

void send_float(float n)
{
 16c:	8f 92       	push	r8
 16e:	9f 92       	push	r9
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	cf 93       	push	r28
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
	// Extract integer part
	char sign = 0;
	if (n < 0) {sign = 1; n *= -1;}
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	a9 01       	movw	r20, r18
 188:	0e 94 c6 01 	call	0x38c	; 0x38c <__cmpsf2>
 18c:	88 23       	and	r24, r24
 18e:	34 f4       	brge	.+12     	; 0x19c <send_float+0x30>
 190:	f7 fa       	bst	r15, 7
 192:	f0 94       	com	r15
 194:	f7 f8       	bld	r15, 7
 196:	f0 94       	com	r15
 198:	c1 e0       	ldi	r28, 0x01	; 1
 19a:	01 c0       	rjmp	.+2      	; 0x19e <send_float+0x32>
}

void send_float(float n)
{
	// Extract integer part
	char sign = 0;
 19c:	c0 e0       	ldi	r28, 0x00	; 0
	if (n < 0) {sign = 1; n *= -1;}
	char ipart = (int)n;
 19e:	c7 01       	movw	r24, r14
 1a0:	b6 01       	movw	r22, r12
 1a2:	0e 94 cb 01 	call	0x396	; 0x396 <__fixsfsi>
 1a6:	4b 01       	movw	r8, r22
 1a8:	5c 01       	movw	r10, r24
	
	// Extract floating part
	char fpart = (n - (float)ipart) * 100;
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 01 02 	call	0x402	; 0x402 <__floatunsisf>
 1b4:	9b 01       	movw	r18, r22
 1b6:	ac 01       	movw	r20, r24
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__subsf3>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	48 ec       	ldi	r20, 0xC8	; 200
 1c6:	52 e4       	ldi	r21, 0x42	; 66
 1c8:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 1cc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fixunssfsi>
 1d0:	f6 2e       	mov	r15, r22
	if (sign == 1) send_char('-');
 1d2:	c1 30       	cpi	r28, 0x01	; 1
 1d4:	19 f4       	brne	.+6      	; 0x1dc <send_float+0x70>
 1d6:	8d e2       	ldi	r24, 0x2D	; 45
 1d8:	0e 94 63 00 	call	0xc6	; 0xc6 <send_char>
	send_int(ipart);
 1dc:	c4 01       	movw	r24, r8
 1de:	99 27       	eor	r25, r25
 1e0:	0e 94 99 00 	call	0x132	; 0x132 <send_int>
	if (fpart == 0) return;
 1e4:	ff 20       	and	r15, r15
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <send_float+0x8a>
	send_char('.');
 1e8:	8e e2       	ldi	r24, 0x2E	; 46
 1ea:	0e 94 63 00 	call	0xc6	; 0xc6 <send_char>
	send_int(fpart);
 1ee:	8f 2d       	mov	r24, r15
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <send_int>
 1f6:	cf 91       	pop	r28
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	bf 90       	pop	r11
 202:	af 90       	pop	r10
 204:	9f 90       	pop	r9
 206:	8f 90       	pop	r8
 208:	08 95       	ret

0000020a <main>:
#include "./ECU/Button/Button.h"
#include "./ECU/LCD/LCD.h"

int main(void)
{  
	init_LCD();
 20a:	0e 94 54 00 	call	0xa8	; 0xa8 <init_LCD>
	init_button();
 20e:	0e 94 36 00 	call	0x6c	; 0x6c <init_button>
	double res;
    while (1)
    {
		res = read_button();
 212:	0e 94 39 00 	call	0x72	; 0x72 <read_button>
 216:	6b 01       	movw	r12, r22
 218:	7c 01       	movw	r14, r24
		send_command(0x01);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 3c 00 	call	0x78	; 0x78 <send_command>
		send_float(res);
 220:	c7 01       	movw	r24, r14
 222:	b6 01       	movw	r22, r12
 224:	0e 94 b6 00 	call	0x16c	; 0x16c <send_float>
		send_char('S');
 228:	83 e5       	ldi	r24, 0x53	; 83
 22a:	0e 94 63 00 	call	0xc6	; 0xc6 <send_char>
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <main+0x8>

00000230 <init_input_capture>:
#include <avr/io.h>
#include "InputCapture.h"

void init_input_capture() 
{	
	DDRB |= 1;
 230:	87 b3       	in	r24, 0x17	; 23
 232:	81 60       	ori	r24, 0x01	; 1
 234:	87 bb       	out	0x17, r24	; 23
	DDRD &= ~(1 << PD6);
 236:	81 b3       	in	r24, 0x11	; 17
 238:	8f 7b       	andi	r24, 0xBF	; 191
 23a:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1 << PD6;
 23c:	82 b3       	in	r24, 0x12	; 18
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	82 bb       	out	0x12, r24	; 18
	TCCR1B |= 1 << CS10 | 1 << CS12;
 242:	8e b5       	in	r24, 0x2e	; 46
 244:	85 60       	ori	r24, 0x05	; 5
 246:	8e bd       	out	0x2e, r24	; 46
 248:	08 95       	ret

0000024a <read_on_time>:
}

double read_on_time() 
{
	int overflow = 0;
	TCNT1 = 0;
 24a:	1d bc       	out	0x2d, r1	; 45
 24c:	1c bc       	out	0x2c, r1	; 44
	int t1, t2;
	TCCR1B &= ~(1 << ICES1);
 24e:	8e b5       	in	r24, 0x2e	; 46
 250:	8f 7b       	andi	r24, 0xBF	; 191
 252:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR & (1 << ICF1)) == 0)
 254:	01 c0       	rjmp	.+2      	; 0x258 <read_on_time+0xe>
	{
		if ((TIFR & (1 << TOV1)) == 1)
 256:	88 b7       	in	r24, 0x38	; 56
{
	int overflow = 0;
	TCNT1 = 0;
	int t1, t2;
	TCCR1B &= ~(1 << ICES1);
	while ((TIFR & (1 << ICF1)) == 0)
 258:	08 b6       	in	r0, 0x38	; 56
 25a:	05 fe       	sbrs	r0, 5
 25c:	fc cf       	rjmp	.-8      	; 0x256 <read_on_time+0xc>
		{
			overflow++;
			TIFR |= 1 << TOV1;
		}
	}
	PORTB |= 1;
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	81 60       	ori	r24, 0x01	; 1
 262:	88 bb       	out	0x18, r24	; 24
	TIFR |= 1 << ICF1;
 264:	88 b7       	in	r24, 0x38	; 56
 266:	80 62       	ori	r24, 0x20	; 32
 268:	88 bf       	out	0x38, r24	; 56
	t1 = ICR1 + overflow * 0xFFFF;
 26a:	26 b5       	in	r18, 0x26	; 38
 26c:	37 b5       	in	r19, 0x27	; 39
	TCCR1B |= (1 << ICES1);
 26e:	8e b5       	in	r24, 0x2e	; 46
 270:	80 64       	ori	r24, 0x40	; 64
 272:	8e bd       	out	0x2e, r24	; 46
	
	while ((TIFR & (1 << ICF1)) == 0)
 274:	01 c0       	rjmp	.+2      	; 0x278 <read_on_time+0x2e>
	{
		if ((TIFR & (1 << TOV1)) == 1)
 276:	88 b7       	in	r24, 0x38	; 56
	PORTB |= 1;
	TIFR |= 1 << ICF1;
	t1 = ICR1 + overflow * 0xFFFF;
	TCCR1B |= (1 << ICES1);
	
	while ((TIFR & (1 << ICF1)) == 0)
 278:	08 b6       	in	r0, 0x38	; 56
 27a:	05 fe       	sbrs	r0, 5
 27c:	fc cf       	rjmp	.-8      	; 0x276 <read_on_time+0x2c>
		{
			overflow++;
			TIFR |= 1 << TOV1;
		}
	}
	TIFR |= 1 << ICF1;
 27e:	88 b7       	in	r24, 0x38	; 56
 280:	80 62       	ori	r24, 0x20	; 32
 282:	88 bf       	out	0x38, r24	; 56
	TIFR |= 1 << TOV1;
 284:	88 b7       	in	r24, 0x38	; 56
 286:	84 60       	ori	r24, 0x04	; 4
 288:	88 bf       	out	0x38, r24	; 56
	PORTB &= 0xFE;
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	88 bb       	out	0x18, r24	; 24
	t2 = ICR1 + overflow * 0xFFFF;
 290:	66 b5       	in	r22, 0x26	; 38
 292:	77 b5       	in	r23, 0x27	; 39
	return ((t2 - t1) * 0.001024);
 294:	62 1b       	sub	r22, r18
 296:	73 0b       	sbc	r23, r19
 298:	07 2e       	mov	r0, r23
 29a:	00 0c       	add	r0, r0
 29c:	88 0b       	sbc	r24, r24
 29e:	99 0b       	sbc	r25, r25
 2a0:	0e 94 03 02 	call	0x406	; 0x406 <__floatsisf>
 2a4:	2d eb       	ldi	r18, 0xBD	; 189
 2a6:	37 e3       	ldi	r19, 0x37	; 55
 2a8:	46 e8       	ldi	r20, 0x86	; 134
 2aa:	5a e3       	ldi	r21, 0x3A	; 58
 2ac:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 2b0:	08 95       	ret

000002b2 <__subsf3>:
 2b2:	50 58       	subi	r21, 0x80	; 128

000002b4 <__addsf3>:
 2b4:	bb 27       	eor	r27, r27
 2b6:	aa 27       	eor	r26, r26
 2b8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__addsf3x>
 2bc:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_round>
 2c0:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscA>
 2c4:	38 f0       	brcs	.+14     	; 0x2d4 <__addsf3+0x20>
 2c6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_pscB>
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__addsf3+0x20>
 2cc:	39 f4       	brne	.+14     	; 0x2dc <__addsf3+0x28>
 2ce:	9f 3f       	cpi	r25, 0xFF	; 255
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <__addsf3+0x24>
 2d2:	26 f4       	brtc	.+8      	; 0x2dc <__addsf3+0x28>
 2d4:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_nan>
 2d8:	0e f4       	brtc	.+2      	; 0x2dc <__addsf3+0x28>
 2da:	e0 95       	com	r30
 2dc:	e7 fb       	bst	r30, 7
 2de:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>

000002e2 <__addsf3x>:
 2e2:	e9 2f       	mov	r30, r25
 2e4:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_split3>
 2e8:	58 f3       	brcs	.-42     	; 0x2c0 <__addsf3+0xc>
 2ea:	ba 17       	cp	r27, r26
 2ec:	62 07       	cpc	r22, r18
 2ee:	73 07       	cpc	r23, r19
 2f0:	84 07       	cpc	r24, r20
 2f2:	95 07       	cpc	r25, r21
 2f4:	20 f0       	brcs	.+8      	; 0x2fe <__addsf3x+0x1c>
 2f6:	79 f4       	brne	.+30     	; 0x316 <__addsf3x+0x34>
 2f8:	a6 f5       	brtc	.+104    	; 0x362 <__addsf3x+0x80>
 2fa:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_zero>
 2fe:	0e f4       	brtc	.+2      	; 0x302 <__addsf3x+0x20>
 300:	e0 95       	com	r30
 302:	0b 2e       	mov	r0, r27
 304:	ba 2f       	mov	r27, r26
 306:	a0 2d       	mov	r26, r0
 308:	0b 01       	movw	r0, r22
 30a:	b9 01       	movw	r22, r18
 30c:	90 01       	movw	r18, r0
 30e:	0c 01       	movw	r0, r24
 310:	ca 01       	movw	r24, r20
 312:	a0 01       	movw	r20, r0
 314:	11 24       	eor	r1, r1
 316:	ff 27       	eor	r31, r31
 318:	59 1b       	sub	r21, r25
 31a:	99 f0       	breq	.+38     	; 0x342 <__addsf3x+0x60>
 31c:	59 3f       	cpi	r21, 0xF9	; 249
 31e:	50 f4       	brcc	.+20     	; 0x334 <__addsf3x+0x52>
 320:	50 3e       	cpi	r21, 0xE0	; 224
 322:	68 f1       	brcs	.+90     	; 0x37e <__addsf3x+0x9c>
 324:	1a 16       	cp	r1, r26
 326:	f0 40       	sbci	r31, 0x00	; 0
 328:	a2 2f       	mov	r26, r18
 32a:	23 2f       	mov	r18, r19
 32c:	34 2f       	mov	r19, r20
 32e:	44 27       	eor	r20, r20
 330:	58 5f       	subi	r21, 0xF8	; 248
 332:	f3 cf       	rjmp	.-26     	; 0x31a <__addsf3x+0x38>
 334:	46 95       	lsr	r20
 336:	37 95       	ror	r19
 338:	27 95       	ror	r18
 33a:	a7 95       	ror	r26
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	53 95       	inc	r21
 340:	c9 f7       	brne	.-14     	; 0x334 <__addsf3x+0x52>
 342:	7e f4       	brtc	.+30     	; 0x362 <__addsf3x+0x80>
 344:	1f 16       	cp	r1, r31
 346:	ba 0b       	sbc	r27, r26
 348:	62 0b       	sbc	r22, r18
 34a:	73 0b       	sbc	r23, r19
 34c:	84 0b       	sbc	r24, r20
 34e:	ba f0       	brmi	.+46     	; 0x37e <__addsf3x+0x9c>
 350:	91 50       	subi	r25, 0x01	; 1
 352:	a1 f0       	breq	.+40     	; 0x37c <__addsf3x+0x9a>
 354:	ff 0f       	add	r31, r31
 356:	bb 1f       	adc	r27, r27
 358:	66 1f       	adc	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	88 1f       	adc	r24, r24
 35e:	c2 f7       	brpl	.-16     	; 0x350 <__addsf3x+0x6e>
 360:	0e c0       	rjmp	.+28     	; 0x37e <__addsf3x+0x9c>
 362:	ba 0f       	add	r27, r26
 364:	62 1f       	adc	r22, r18
 366:	73 1f       	adc	r23, r19
 368:	84 1f       	adc	r24, r20
 36a:	48 f4       	brcc	.+18     	; 0x37e <__addsf3x+0x9c>
 36c:	87 95       	ror	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f7 95       	ror	r31
 376:	9e 3f       	cpi	r25, 0xFE	; 254
 378:	08 f0       	brcs	.+2      	; 0x37c <__addsf3x+0x9a>
 37a:	b0 cf       	rjmp	.-160    	; 0x2dc <__addsf3+0x28>
 37c:	93 95       	inc	r25
 37e:	88 0f       	add	r24, r24
 380:	08 f0       	brcs	.+2      	; 0x384 <__addsf3x+0xa2>
 382:	99 27       	eor	r25, r25
 384:	ee 0f       	add	r30, r30
 386:	97 95       	ror	r25
 388:	87 95       	ror	r24
 38a:	08 95       	ret

0000038c <__cmpsf2>:
 38c:	0e 94 3e 02 	call	0x47c	; 0x47c <__fp_cmp>
 390:	08 f4       	brcc	.+2      	; 0x394 <__cmpsf2+0x8>
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret

00000396 <__fixsfsi>:
 396:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fixunssfsi>
 39a:	68 94       	set
 39c:	b1 11       	cpse	r27, r1
 39e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>
 3a2:	08 95       	ret

000003a4 <__fixunssfsi>:
 3a4:	0e 94 92 02 	call	0x524	; 0x524 <__fp_splitA>
 3a8:	88 f0       	brcs	.+34     	; 0x3cc <__fixunssfsi+0x28>
 3aa:	9f 57       	subi	r25, 0x7F	; 127
 3ac:	98 f0       	brcs	.+38     	; 0x3d4 <__fixunssfsi+0x30>
 3ae:	b9 2f       	mov	r27, r25
 3b0:	99 27       	eor	r25, r25
 3b2:	b7 51       	subi	r27, 0x17	; 23
 3b4:	b0 f0       	brcs	.+44     	; 0x3e2 <__fixunssfsi+0x3e>
 3b6:	e1 f0       	breq	.+56     	; 0x3f0 <__fixunssfsi+0x4c>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	1a f0       	brmi	.+6      	; 0x3c8 <__fixunssfsi+0x24>
 3c2:	ba 95       	dec	r27
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__fixunssfsi+0x14>
 3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <__fixunssfsi+0x4c>
 3c8:	b1 30       	cpi	r27, 0x01	; 1
 3ca:	91 f0       	breq	.+36     	; 0x3f0 <__fixunssfsi+0x4c>
 3cc:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_zero>
 3d0:	b1 e0       	ldi	r27, 0x01	; 1
 3d2:	08 95       	ret
 3d4:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_zero>
 3d8:	67 2f       	mov	r22, r23
 3da:	78 2f       	mov	r23, r24
 3dc:	88 27       	eor	r24, r24
 3de:	b8 5f       	subi	r27, 0xF8	; 248
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <__fixunssfsi+0x4c>
 3e2:	b9 3f       	cpi	r27, 0xF9	; 249
 3e4:	cc f3       	brlt	.-14     	; 0x3d8 <__fixunssfsi+0x34>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	b3 95       	inc	r27
 3ee:	d9 f7       	brne	.-10     	; 0x3e6 <__fixunssfsi+0x42>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__DATA_REGION_LENGTH__>
 3f2:	90 95       	com	r25
 3f4:	80 95       	com	r24
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	8f 4f       	sbci	r24, 0xFF	; 255
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	08 95       	ret

00000402 <__floatunsisf>:
 402:	e8 94       	clt
 404:	09 c0       	rjmp	.+18     	; 0x418 <__floatsisf+0x12>

00000406 <__floatsisf>:
 406:	97 fb       	bst	r25, 7
 408:	3e f4       	brtc	.+14     	; 0x418 <__floatsisf+0x12>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	99 23       	and	r25, r25
 41a:	a9 f0       	breq	.+42     	; 0x446 <__floatsisf+0x40>
 41c:	f9 2f       	mov	r31, r25
 41e:	96 e9       	ldi	r25, 0x96	; 150
 420:	bb 27       	eor	r27, r27
 422:	93 95       	inc	r25
 424:	f6 95       	lsr	r31
 426:	87 95       	ror	r24
 428:	77 95       	ror	r23
 42a:	67 95       	ror	r22
 42c:	b7 95       	ror	r27
 42e:	f1 11       	cpse	r31, r1
 430:	f8 cf       	rjmp	.-16     	; 0x422 <__floatsisf+0x1c>
 432:	fa f4       	brpl	.+62     	; 0x472 <__stack+0x13>
 434:	bb 0f       	add	r27, r27
 436:	11 f4       	brne	.+4      	; 0x43c <__floatsisf+0x36>
 438:	60 ff       	sbrs	r22, 0
 43a:	1b c0       	rjmp	.+54     	; 0x472 <__stack+0x13>
 43c:	6f 5f       	subi	r22, 0xFF	; 255
 43e:	7f 4f       	sbci	r23, 0xFF	; 255
 440:	8f 4f       	sbci	r24, 0xFF	; 255
 442:	9f 4f       	sbci	r25, 0xFF	; 255
 444:	16 c0       	rjmp	.+44     	; 0x472 <__stack+0x13>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <__floatsisf+0x48>
 44a:	96 e9       	ldi	r25, 0x96	; 150
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__stack+0x11>
 44e:	77 23       	and	r23, r23
 450:	21 f0       	breq	.+8      	; 0x45a <__floatsisf+0x54>
 452:	9e e8       	ldi	r25, 0x8E	; 142
 454:	87 2f       	mov	r24, r23
 456:	76 2f       	mov	r23, r22
 458:	05 c0       	rjmp	.+10     	; 0x464 <__stack+0x5>
 45a:	66 23       	and	r22, r22
 45c:	71 f0       	breq	.+28     	; 0x47a <__stack+0x1b>
 45e:	96 e8       	ldi	r25, 0x86	; 134
 460:	86 2f       	mov	r24, r22
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	2a f0       	brmi	.+10     	; 0x472 <__stack+0x13>
 468:	9a 95       	dec	r25
 46a:	66 0f       	add	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	da f7       	brpl	.-10     	; 0x468 <__stack+0x9>
 472:	88 0f       	add	r24, r24
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <__fp_cmp>:
 47c:	99 0f       	add	r25, r25
 47e:	00 08       	sbc	r0, r0
 480:	55 0f       	add	r21, r21
 482:	aa 0b       	sbc	r26, r26
 484:	e0 e8       	ldi	r30, 0x80	; 128
 486:	fe ef       	ldi	r31, 0xFE	; 254
 488:	16 16       	cp	r1, r22
 48a:	17 06       	cpc	r1, r23
 48c:	e8 07       	cpc	r30, r24
 48e:	f9 07       	cpc	r31, r25
 490:	c0 f0       	brcs	.+48     	; 0x4c2 <__fp_cmp+0x46>
 492:	12 16       	cp	r1, r18
 494:	13 06       	cpc	r1, r19
 496:	e4 07       	cpc	r30, r20
 498:	f5 07       	cpc	r31, r21
 49a:	98 f0       	brcs	.+38     	; 0x4c2 <__fp_cmp+0x46>
 49c:	62 1b       	sub	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	95 0b       	sbc	r25, r21
 4a4:	39 f4       	brne	.+14     	; 0x4b4 <__fp_cmp+0x38>
 4a6:	0a 26       	eor	r0, r26
 4a8:	61 f0       	breq	.+24     	; 0x4c2 <__fp_cmp+0x46>
 4aa:	23 2b       	or	r18, r19
 4ac:	24 2b       	or	r18, r20
 4ae:	25 2b       	or	r18, r21
 4b0:	21 f4       	brne	.+8      	; 0x4ba <__fp_cmp+0x3e>
 4b2:	08 95       	ret
 4b4:	0a 26       	eor	r0, r26
 4b6:	09 f4       	brne	.+2      	; 0x4ba <__fp_cmp+0x3e>
 4b8:	a1 40       	sbci	r26, 0x01	; 1
 4ba:	a6 95       	lsr	r26
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	81 1d       	adc	r24, r1
 4c0:	81 1d       	adc	r24, r1
 4c2:	08 95       	ret

000004c4 <__fp_inf>:
 4c4:	97 f9       	bld	r25, 7
 4c6:	9f 67       	ori	r25, 0x7F	; 127
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <__fp_nan>:
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	08 95       	ret

000004d6 <__fp_pscA>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	09 06       	cpc	r0, r25
 4e2:	08 95       	ret

000004e4 <__fp_pscB>:
 4e4:	00 24       	eor	r0, r0
 4e6:	0a 94       	dec	r0
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	14 06       	cpc	r1, r20
 4ee:	05 06       	cpc	r0, r21
 4f0:	08 95       	ret

000004f2 <__fp_round>:
 4f2:	09 2e       	mov	r0, r25
 4f4:	03 94       	inc	r0
 4f6:	00 0c       	add	r0, r0
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__fp_round+0xc>
 4fa:	88 23       	and	r24, r24
 4fc:	52 f0       	brmi	.+20     	; 0x512 <__fp_round+0x20>
 4fe:	bb 0f       	add	r27, r27
 500:	40 f4       	brcc	.+16     	; 0x512 <__fp_round+0x20>
 502:	bf 2b       	or	r27, r31
 504:	11 f4       	brne	.+4      	; 0x50a <__fp_round+0x18>
 506:	60 ff       	sbrs	r22, 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <__fp_round+0x20>
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__fp_split3>:
 514:	57 fd       	sbrc	r21, 7
 516:	90 58       	subi	r25, 0x80	; 128
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	59 f0       	breq	.+22     	; 0x534 <__fp_splitA+0x10>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	71 f0       	breq	.+28     	; 0x53e <__fp_splitA+0x1a>
 522:	47 95       	ror	r20

00000524 <__fp_splitA>:
 524:	88 0f       	add	r24, r24
 526:	97 fb       	bst	r25, 7
 528:	99 1f       	adc	r25, r25
 52a:	61 f0       	breq	.+24     	; 0x544 <__fp_splitA+0x20>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	79 f0       	breq	.+30     	; 0x54e <__fp_splitA+0x2a>
 530:	87 95       	ror	r24
 532:	08 95       	ret
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	55 1f       	adc	r21, r21
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <__fp_split3+0xe>
 53e:	46 95       	lsr	r20
 540:	f1 df       	rcall	.-30     	; 0x524 <__fp_splitA>
 542:	08 c0       	rjmp	.+16     	; 0x554 <__fp_splitA+0x30>
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	99 1f       	adc	r25, r25
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <__fp_splitA+0xc>
 54e:	86 95       	lsr	r24
 550:	71 05       	cpc	r23, r1
 552:	61 05       	cpc	r22, r1
 554:	08 94       	sec
 556:	08 95       	ret

00000558 <__fp_zero>:
 558:	e8 94       	clt

0000055a <__fp_szero>:
 55a:	bb 27       	eor	r27, r27
 55c:	66 27       	eor	r22, r22
 55e:	77 27       	eor	r23, r23
 560:	cb 01       	movw	r24, r22
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__mulsf3>:
 566:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3x>
 56a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_round>
 56e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscA>
 572:	38 f0       	brcs	.+14     	; 0x582 <__mulsf3+0x1c>
 574:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_pscB>
 578:	20 f0       	brcs	.+8      	; 0x582 <__mulsf3+0x1c>
 57a:	95 23       	and	r25, r21
 57c:	11 f0       	breq	.+4      	; 0x582 <__mulsf3+0x1c>
 57e:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 582:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_nan>
 586:	11 24       	eor	r1, r1
 588:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>

0000058c <__mulsf3x>:
 58c:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_split3>
 590:	70 f3       	brcs	.-36     	; 0x56e <__mulsf3+0x8>

00000592 <__mulsf3_pse>:
 592:	95 9f       	mul	r25, r21
 594:	c1 f3       	breq	.-16     	; 0x586 <__mulsf3+0x20>
 596:	95 0f       	add	r25, r21
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	55 1f       	adc	r21, r21
 59c:	62 9f       	mul	r22, r18
 59e:	f0 01       	movw	r30, r0
 5a0:	72 9f       	mul	r23, r18
 5a2:	bb 27       	eor	r27, r27
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	63 9f       	mul	r22, r19
 5aa:	aa 27       	eor	r26, r26
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	aa 1f       	adc	r26, r26
 5b2:	64 9f       	mul	r22, r20
 5b4:	66 27       	eor	r22, r22
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	66 1f       	adc	r22, r22
 5bc:	82 9f       	mul	r24, r18
 5be:	22 27       	eor	r18, r18
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	73 9f       	mul	r23, r19
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	83 9f       	mul	r24, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	22 1f       	adc	r18, r18
 5d6:	74 9f       	mul	r23, r20
 5d8:	33 27       	eor	r19, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	23 1f       	adc	r18, r19
 5e0:	84 9f       	mul	r24, r20
 5e2:	60 0d       	add	r22, r0
 5e4:	21 1d       	adc	r18, r1
 5e6:	82 2f       	mov	r24, r18
 5e8:	76 2f       	mov	r23, r22
 5ea:	6a 2f       	mov	r22, r26
 5ec:	11 24       	eor	r1, r1
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	9a f0       	brmi	.+38     	; 0x61a <__mulsf3_pse+0x88>
 5f4:	f1 f0       	breq	.+60     	; 0x632 <__mulsf3_pse+0xa0>
 5f6:	88 23       	and	r24, r24
 5f8:	4a f0       	brmi	.+18     	; 0x60c <__mulsf3_pse+0x7a>
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	bb 1f       	adc	r27, r27
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x64>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	80 f0       	brcs	.+32     	; 0x632 <__mulsf3_pse+0xa0>
 612:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 616:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__mulsf3_pse+0x84>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__mulsf3_pse+0x84>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	e7 95       	ror	r30
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c1 f7       	brne	.-16     	; 0x622 <__mulsf3_pse+0x90>
 632:	fe 2b       	or	r31, r30
 634:	88 0f       	add	r24, r24
 636:	91 1d       	adc	r25, r1
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__itoa_ncheck>:
 640:	bb 27       	eor	r27, r27
 642:	4a 30       	cpi	r20, 0x0A	; 10
 644:	31 f4       	brne	.+12     	; 0x652 <__itoa_ncheck+0x12>
 646:	99 23       	and	r25, r25
 648:	22 f4       	brpl	.+8      	; 0x652 <__itoa_ncheck+0x12>
 64a:	bd e2       	ldi	r27, 0x2D	; 45
 64c:	90 95       	com	r25
 64e:	81 95       	neg	r24
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	0c 94 2c 03 	jmp	0x658	; 0x658 <__utoa_common>

00000656 <__utoa_ncheck>:
 656:	bb 27       	eor	r27, r27

00000658 <__utoa_common>:
 658:	fb 01       	movw	r30, r22
 65a:	55 27       	eor	r21, r21
 65c:	aa 27       	eor	r26, r26
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	aa 1f       	adc	r26, r26
 664:	a4 17       	cp	r26, r20
 666:	10 f0       	brcs	.+4      	; 0x66c <__utoa_common+0x14>
 668:	a4 1b       	sub	r26, r20
 66a:	83 95       	inc	r24
 66c:	50 51       	subi	r21, 0x10	; 16
 66e:	b9 f7       	brne	.-18     	; 0x65e <__utoa_common+0x6>
 670:	a0 5d       	subi	r26, 0xD0	; 208
 672:	aa 33       	cpi	r26, 0x3A	; 58
 674:	08 f0       	brcs	.+2      	; 0x678 <__utoa_common+0x20>
 676:	a9 5d       	subi	r26, 0xD9	; 217
 678:	a1 93       	st	Z+, r26
 67a:	00 97       	sbiw	r24, 0x00	; 0
 67c:	79 f7       	brne	.-34     	; 0x65c <__utoa_common+0x4>
 67e:	b1 11       	cpse	r27, r1
 680:	b1 93       	st	Z+, r27
 682:	11 92       	st	Z+, r1
 684:	cb 01       	movw	r24, r22
 686:	0c 94 45 03 	jmp	0x68a	; 0x68a <strrev>

0000068a <strrev>:
 68a:	dc 01       	movw	r26, r24
 68c:	fc 01       	movw	r30, r24
 68e:	67 2f       	mov	r22, r23
 690:	71 91       	ld	r23, Z+
 692:	77 23       	and	r23, r23
 694:	e1 f7       	brne	.-8      	; 0x68e <strrev+0x4>
 696:	32 97       	sbiw	r30, 0x02	; 2
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <strrev+0x18>
 69a:	7c 91       	ld	r23, X
 69c:	6d 93       	st	X+, r22
 69e:	70 83       	st	Z, r23
 6a0:	62 91       	ld	r22, -Z
 6a2:	ae 17       	cp	r26, r30
 6a4:	bf 07       	cpc	r27, r31
 6a6:	c8 f3       	brcs	.-14     	; 0x69a <strrev+0x10>
 6a8:	08 95       	ret

000006aa <_exit>:
 6aa:	f8 94       	cli

000006ac <__stop_program>:
 6ac:	ff cf       	rjmp	.-2      	; 0x6ac <__stop_program>
