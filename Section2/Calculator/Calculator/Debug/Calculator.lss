
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000008dc  00000950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df6  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091e  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fd  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000763  00000000  00000000  00002e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 90 00 	call	0x120	; 0x120 <main>
  7a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <calc>:
 */ 

#include "calculator.h"

float calc(char num1, char num2, char oper)
{
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
	switch (oper)
  8e:	4d 32       	cpi	r20, 0x2D	; 45
  90:	99 f0       	breq	.+38     	; 0xb8 <calc+0x36>
  92:	18 f4       	brcc	.+6      	; 0x9a <calc+0x18>
  94:	4b 32       	cpi	r20, 0x2B	; 43
  96:	31 f0       	breq	.+12     	; 0xa4 <calc+0x22>
  98:	39 c0       	rjmp	.+114    	; 0x10c <calc+0x8a>
  9a:	4f 32       	cpi	r20, 0x2F	; 47
  9c:	11 f1       	breq	.+68     	; 0xe2 <calc+0x60>
  9e:	48 35       	cpi	r20, 0x58	; 88
  a0:	b1 f0       	breq	.+44     	; 0xce <calc+0x4c>
  a2:	34 c0       	rjmp	.+104    	; 0x10c <calc+0x8a>
	{
		case '+':
			return num1 + num2;
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	68 0f       	add	r22, r24
  a8:	71 1d       	adc	r23, r1
  aa:	07 2e       	mov	r0, r23
  ac:	00 0c       	add	r0, r0
  ae:	88 0b       	sbc	r24, r24
  b0:	99 0b       	sbc	r25, r25
  b2:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
  b6:	2e c0       	rjmp	.+92     	; 0x114 <calc+0x92>
		case '-':
			return num1 - num2;
  b8:	68 2f       	mov	r22, r24
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	6c 1b       	sub	r22, r28
  be:	71 09       	sbc	r23, r1
  c0:	07 2e       	mov	r0, r23
  c2:	00 0c       	add	r0, r0
  c4:	88 0b       	sbc	r24, r24
  c6:	99 0b       	sbc	r25, r25
  c8:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
  cc:	23 c0       	rjmp	.+70     	; 0x114 <calc+0x92>
		case 'X':
			return num1 * num2;
  ce:	86 9f       	mul	r24, r22
  d0:	b0 01       	movw	r22, r0
  d2:	11 24       	eor	r1, r1
  d4:	07 2e       	mov	r0, r23
  d6:	00 0c       	add	r0, r0
  d8:	88 0b       	sbc	r24, r24
  da:	99 0b       	sbc	r25, r25
  dc:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
  e0:	19 c0       	rjmp	.+50     	; 0x114 <calc+0x92>
		case '/':
			return ((double)num1) / num2;
  e2:	68 2f       	mov	r22, r24
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
  f2:	6c 2f       	mov	r22, r28
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
  fe:	9b 01       	movw	r18, r22
 100:	ac 01       	movw	r20, r24
 102:	c7 01       	movw	r24, r14
 104:	b6 01       	movw	r22, r12
 106:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__divsf3>
 10a:	04 c0       	rjmp	.+8      	; 0x114 <calc+0x92>
		default:
			return -1;
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	9f eb       	ldi	r25, 0xBF	; 191
	}
 114:	cf 91       	pop	r28
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	08 95       	ret

00000120 <main>:
#include "./../ECU/LCD/LCD.h"
#include "./Calculator/calculator.h"

int main(void)
{
    init_LCD();
 120:	0e 94 4d 01 	call	0x29a	; 0x29a <init_LCD>
	init_keypad();
 124:	0e 94 c5 00 	call	0x18a	; 0x18a <init_keypad>
    while (1) 
    {
		while (1)
		{
		
			a = read_input() - '0';
 128:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 12c:	d0 ed       	ldi	r29, 0xD0	; 208
 12e:	d8 0f       	add	r29, r24
			send_int(a);
 130:	8d 2f       	mov	r24, r29
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
			
			o = read_input();
 138:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 13c:	c8 2f       	mov	r28, r24
			if (o == 'C') {
 13e:	83 34       	cpi	r24, 0x43	; 67
 140:	21 f4       	brne	.+8      	; 0x14a <main+0x2a>
				send_command(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
				continue;
 148:	ef cf       	rjmp	.-34     	; 0x128 <main+0x8>
			}
			
			send_char(o);
 14a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
			
			b = read_input() - '0';
 14e:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 152:	10 ed       	ldi	r17, 0xD0	; 208
 154:	18 0f       	add	r17, r24
			if (b + '0' == 'C'){
 156:	13 31       	cpi	r17, 0x13	; 19
 158:	21 f4       	brne	.+8      	; 0x162 <main+0x42>
				send_command(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
				continue;
 160:	e3 cf       	rjmp	.-58     	; 0x128 <main+0x8>
			}
			
			send_int(b);
 162:	81 2f       	mov	r24, r17
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
			
			send_char('=');
 16a:	8d e3       	ldi	r24, 0x3D	; 61
 16c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
			send_float(calc(a, b, o));
 170:	4c 2f       	mov	r20, r28
 172:	61 2f       	mov	r22, r17
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 41 00 	call	0x82	; 0x82 <calc>
 17a:	0e 94 af 01 	call	0x35e	; 0x35e <send_float>
			read_input();		
 17e:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
			send_command(0x01);	
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
 188:	cf cf       	rjmp	.-98     	; 0x128 <main+0x8>

0000018a <init_keypad>:
	{'C','0','=','/'}
};

void init_keypad()
{
	KEYPAD_DDR = 0x00;
 18a:	11 ba       	out	0x11, r1	; 17
	KEYPAD_DDR |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	8f 60       	ori	r24, 0x0F	; 15
 190:	81 bb       	out	0x11, r24	; 17
	
	KEYPAD_PORT = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	82 bb       	out	0x12, r24	; 18
 196:	08 95       	ret

00000198 <read_input>:
}

unsigned char read_input()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	unsigned char x = -1, y = -1;
	bool c = 1;
 19c:	71 e0       	ldi	r23, 0x01	; 1
	KEYPAD_PORT = 0xFF;
}

unsigned char read_input()
{
	unsigned char x = -1, y = -1;
 19e:	df ef       	ldi	r29, 0xFF	; 255
 1a0:	cf ef       	ldi	r28, 0xFF	; 255
	bool c = 1;
	while (1)
	{
		for (unsigned char i = 0; i < 4; i++)
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	5b c0       	rjmp	.+182    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			KEYPAD_PORT &= ~(1 << i);
 1a6:	42 b3       	in	r20, 0x12	; 18
 1a8:	86 2f       	mov	r24, r22
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	06 2e       	mov	r0, r22
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <read_input+0x20>
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <read_input+0x1c>
 1bc:	20 95       	com	r18
 1be:	24 23       	and	r18, r20
 1c0:	22 bb       	out	0x12, r18	; 18
			KEYPAD_PORT |= (1 << ((i + 3) % 4));
 1c2:	42 b3       	in	r20, 0x12	; 18
 1c4:	03 96       	adiw	r24, 0x03	; 3
 1c6:	83 70       	andi	r24, 0x03	; 3
 1c8:	90 78       	andi	r25, 0x80	; 128
 1ca:	99 23       	and	r25, r25
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <read_input+0x3e>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	8c 6f       	ori	r24, 0xFC	; 252
 1d2:	9f 6f       	ori	r25, 0xFF	; 255
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <read_input+0x4a>
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <read_input+0x46>
 1e6:	cf 01       	movw	r24, r30
 1e8:	84 2b       	or	r24, r20
 1ea:	82 bb       	out	0x12, r24	; 18
			
			for (unsigned char j = 0; j < 4; j++)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	1d c0       	rjmp	.+58     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				if ((KEYPAD_PIN & (1 << (j + 4))) == 0)
 1f0:	80 b3       	in	r24, 0x10	; 16
 1f2:	42 2f       	mov	r20, r18
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	4c 5f       	subi	r20, 0xFC	; 252
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	04 2e       	mov	r0, r20
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <__EEPROM_REGION_LENGTH__>
 208:	80 fd       	sbrc	r24, 0
 20a:	0e c0       	rjmp	.+28     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
				{
					while ((KEYPAD_PIN & (1 << (j + 4))) == 0);
 20c:	80 b3       	in	r24, 0x10	; 16
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	04 2e       	mov	r0, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 21c:	80 ff       	sbrs	r24, 0
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
					x = i;
					y = j;
 220:	d2 2f       	mov	r29, r18
			for (unsigned char j = 0; j < 4; j++)
			{
				if ((KEYPAD_PIN & (1 << (j + 4))) == 0)
				{
					while ((KEYPAD_PIN & (1 << (j + 4))) == 0);
					x = i;
 222:	c6 2f       	mov	r28, r22
					y = j;
					c = 0;
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	03 c0       	rjmp	.+6      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
		for (unsigned char i = 0; i < 4; i++)
		{
			KEYPAD_PORT &= ~(1 << i);
			KEYPAD_PORT |= (1 << ((i + 3) % 4));
			
			for (unsigned char j = 0; j < 4; j++)
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	24 30       	cpi	r18, 0x04	; 4
 22c:	08 f3       	brcs	.-62     	; 0x1f0 <read_input+0x58>
					c = 0;
					break;		
				}
			}
			
			if (c == 0)
 22e:	71 11       	cpse	r23, r1
 230:	0e c0       	rjmp	.+28     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				init_keypad();
 232:	0e 94 c5 00 	call	0x18a	; 0x18a <init_keypad>
				return KEYPAD[x][y];
 236:	ec 2f       	mov	r30, r28
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 5a       	subi	r30, 0xA0	; 160
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	ed 0f       	add	r30, r29
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	0b c0       	rjmp	.+22     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 258:	00 00       	nop
{
	unsigned char x = -1, y = -1;
	bool c = 1;
	while (1)
	{
		for (unsigned char i = 0; i < 4; i++)
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	64 30       	cpi	r22, 0x04	; 4
 25e:	08 f4       	brcc	.+2      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 260:	a2 cf       	rjmp	.-188    	; 0x1a6 <read_input+0xe>
 262:	9f cf       	rjmp	.-194    	; 0x1a2 <read_input+0xa>
			
			_delay_ms(1);
			
		}
	}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <send_command>:

#include "LCD.h"

void send_command(unsigned char cmd)
{
	SCRIPT_PORT = 0x00;
 26a:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT &= ~(1 << RS);
 26c:	9b b3       	in	r25, 0x1b	; 27
 26e:	9d 7f       	andi	r25, 0xFD	; 253
 270:	9b bb       	out	0x1b, r25	; 27
	SCRIPT_PORT = cmd;	
 272:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	89 ef       	ldi	r24, 0xF9	; 249
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <send_command+0x14>
 282:	00 c0       	rjmp	.+0      	; 0x284 <send_command+0x1a>
 284:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	83 ec       	ldi	r24, 0xC3	; 195
 28e:	99 e0       	ldi	r25, 0x09	; 9
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <send_command+0x26>
 294:	00 c0       	rjmp	.+0      	; 0x296 <send_command+0x2c>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <init_LCD>:
	_delay_ms(10);
}

void init_LCD()
{
	SCRIPT_DDR = 0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 bb       	out	0x14, r24	; 20
	CONTROL_DDR |= (1 << EN) | (1 << RS);
 29e:	8a b3       	in	r24, 0x1a	; 26
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	8a bb       	out	0x1a, r24	; 26
	send_command(0x01);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
	send_command(0x38);
 2aa:	88 e3       	ldi	r24, 0x38	; 56
 2ac:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
	send_command(0x0E);
 2b0:	8e e0       	ldi	r24, 0x0E	; 14
 2b2:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
 2b6:	08 95       	ret

000002b8 <send_char>:
}

void send_char(char c)
{
	SCRIPT_PORT = 0x00;
 2b8:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT |= (1 << RS);
 2ba:	9b b3       	in	r25, 0x1b	; 27
 2bc:	92 60       	ori	r25, 0x02	; 2
 2be:	9b bb       	out	0x1b, r25	; 27
	SCRIPT_PORT = c;
 2c0:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <send_char+0x14>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <send_char+0x1a>
 2d2:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
 2d4:	8b b3       	in	r24, 0x1b	; 27
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	83 ec       	ldi	r24, 0xC3	; 195
 2dc:	99 e0       	ldi	r25, 0x09	; 9
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <send_char+0x26>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <send_char+0x2c>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <send_string>:
	
	_delay_ms(10);
}

void send_string(char s[])
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(s); i++)
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <send_string+0x1e>
	{
		send_char(s[i]);
 2f8:	f8 01       	movw	r30, r16
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
	_delay_ms(10);
}

void send_string(char s[])
{
	for (int i = 0; i < strlen(s); i++)
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	f8 01       	movw	r30, r16
 308:	01 90       	ld	r0, Z+
 30a:	00 20       	and	r0, r0
 30c:	e9 f7       	brne	.-6      	; 0x308 <send_string+0x20>
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	e0 1b       	sub	r30, r16
 312:	f1 0b       	sbc	r31, r17
 314:	ce 17       	cp	r28, r30
 316:	df 07       	cpc	r29, r31
 318:	78 f3       	brcs	.-34     	; 0x2f8 <send_string+0x10>
	{
		send_char(s[i]);
	}
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <send_int>:

void send_int(int i)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	61 97       	sbiw	r28, 0x11	; 17
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	0e 94 37 04 	call	0x86e	; 0x86e <__itoa_ncheck>
	char s[17];
	itoa(i, s, 10);
	send_string(s);
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 74 01 	call	0x2e8	; 0x2e8 <send_string>
}
 34c:	61 96       	adiw	r28, 0x11	; 17
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <send_float>:

void send_float(float n)
{
 35e:	8f 92       	push	r8
 360:	9f 92       	push	r9
 362:	af 92       	push	r10
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	cf 93       	push	r28
 370:	6b 01       	movw	r12, r22
 372:	7c 01       	movw	r14, r24
	// Extract integer part
	char sign = 0;
	if (n < 0) {sign = 1; n *= -1;}
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	a9 01       	movw	r20, r18
 37a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__cmpsf2>
 37e:	88 23       	and	r24, r24
 380:	34 f4       	brge	.+12     	; 0x38e <send_float+0x30>
 382:	f7 fa       	bst	r15, 7
 384:	f0 94       	com	r15
 386:	f7 f8       	bld	r15, 7
 388:	f0 94       	com	r15
 38a:	c1 e0       	ldi	r28, 0x01	; 1
 38c:	01 c0       	rjmp	.+2      	; 0x390 <send_float+0x32>
}

void send_float(float n)
{
	// Extract integer part
	char sign = 0;
 38e:	c0 e0       	ldi	r28, 0x00	; 0
	if (n < 0) {sign = 1; n *= -1;}
	char ipart = (int)n;
 390:	c7 01       	movw	r24, r14
 392:	b6 01       	movw	r22, r12
 394:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixsfsi>
 398:	4b 01       	movw	r8, r22
 39a:	5c 01       	movw	r10, r24
	
	// Extract floating part
	char fpart = (n - (float)ipart) * 100;
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
 3aa:	c7 01       	movw	r24, r14
 3ac:	b6 01       	movw	r22, r12
 3ae:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__subsf3>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	48 ec       	ldi	r20, 0xC8	; 200
 3b8:	52 e4       	ldi	r21, 0x42	; 66
 3ba:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 3be:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 3c2:	f6 2e       	mov	r15, r22
	if (sign == 1) send_char('-');
 3c4:	c1 30       	cpi	r28, 0x01	; 1
 3c6:	19 f4       	brne	.+6      	; 0x3ce <send_float+0x70>
 3c8:	8d e2       	ldi	r24, 0x2D	; 45
 3ca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
	send_int(ipart);
 3ce:	c4 01       	movw	r24, r8
 3d0:	99 27       	eor	r25, r25
 3d2:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
	if (fpart == 0) return;
 3d6:	ff 20       	and	r15, r15
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <send_float+0x8a>
	send_char('.');
 3da:	8e e2       	ldi	r24, 0x2E	; 46
 3dc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
	send_int(fpart);
 3e0:	8f 2d       	mov	r24, r15
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
 3e8:	cf 91       	pop	r28
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	bf 90       	pop	r11
 3f4:	af 90       	pop	r10
 3f6:	9f 90       	pop	r9
 3f8:	8f 90       	pop	r8
 3fa:	08 95       	ret

000003fc <__subsf3>:
 3fc:	50 58       	subi	r21, 0x80	; 128

000003fe <__addsf3>:
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	0e 94 16 02 	call	0x42c	; 0x42c <__addsf3x>
 406:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 40a:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 40e:	38 f0       	brcs	.+14     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 410:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 414:	20 f0       	brcs	.+8      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 416:	39 f4       	brne	.+14     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 418:	9f 3f       	cpi	r25, 0xFF	; 255
 41a:	19 f4       	brne	.+6      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 41c:	26 f4       	brtc	.+8      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 41e:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 422:	0e f4       	brtc	.+2      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 424:	e0 95       	com	r30
 426:	e7 fb       	bst	r30, 7
 428:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>

0000042c <__addsf3x>:
 42c:	e9 2f       	mov	r30, r25
 42e:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 432:	58 f3       	brcs	.-42     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 434:	ba 17       	cp	r27, r26
 436:	62 07       	cpc	r22, r18
 438:	73 07       	cpc	r23, r19
 43a:	84 07       	cpc	r24, r20
 43c:	95 07       	cpc	r25, r21
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3x+0x1c>
 440:	79 f4       	brne	.+30     	; 0x460 <__stack+0x1>
 442:	a6 f5       	brtc	.+104    	; 0x4ac <__stack+0x4d>
 444:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 448:	0e f4       	brtc	.+2      	; 0x44c <__addsf3x+0x20>
 44a:	e0 95       	com	r30
 44c:	0b 2e       	mov	r0, r27
 44e:	ba 2f       	mov	r27, r26
 450:	a0 2d       	mov	r26, r0
 452:	0b 01       	movw	r0, r22
 454:	b9 01       	movw	r22, r18
 456:	90 01       	movw	r18, r0
 458:	0c 01       	movw	r0, r24
 45a:	ca 01       	movw	r24, r20
 45c:	a0 01       	movw	r20, r0
 45e:	11 24       	eor	r1, r1
 460:	ff 27       	eor	r31, r31
 462:	59 1b       	sub	r21, r25
 464:	99 f0       	breq	.+38     	; 0x48c <__stack+0x2d>
 466:	59 3f       	cpi	r21, 0xF9	; 249
 468:	50 f4       	brcc	.+20     	; 0x47e <__stack+0x1f>
 46a:	50 3e       	cpi	r21, 0xE0	; 224
 46c:	68 f1       	brcs	.+90     	; 0x4c8 <__stack+0x69>
 46e:	1a 16       	cp	r1, r26
 470:	f0 40       	sbci	r31, 0x00	; 0
 472:	a2 2f       	mov	r26, r18
 474:	23 2f       	mov	r18, r19
 476:	34 2f       	mov	r19, r20
 478:	44 27       	eor	r20, r20
 47a:	58 5f       	subi	r21, 0xF8	; 248
 47c:	f3 cf       	rjmp	.-26     	; 0x464 <__stack+0x5>
 47e:	46 95       	lsr	r20
 480:	37 95       	ror	r19
 482:	27 95       	ror	r18
 484:	a7 95       	ror	r26
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	53 95       	inc	r21
 48a:	c9 f7       	brne	.-14     	; 0x47e <__stack+0x1f>
 48c:	7e f4       	brtc	.+30     	; 0x4ac <__stack+0x4d>
 48e:	1f 16       	cp	r1, r31
 490:	ba 0b       	sbc	r27, r26
 492:	62 0b       	sbc	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba f0       	brmi	.+46     	; 0x4c8 <__stack+0x69>
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__stack+0x67>
 49e:	ff 0f       	add	r31, r31
 4a0:	bb 1f       	adc	r27, r27
 4a2:	66 1f       	adc	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	88 1f       	adc	r24, r24
 4a8:	c2 f7       	brpl	.-16     	; 0x49a <__stack+0x3b>
 4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <__stack+0x69>
 4ac:	ba 0f       	add	r27, r26
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 1f       	adc	r23, r19
 4b2:	84 1f       	adc	r24, r20
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <__stack+0x69>
 4b6:	87 95       	ror	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b7 95       	ror	r27
 4be:	f7 95       	ror	r31
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__stack+0x67>
 4c4:	b0 cf       	rjmp	.-160    	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 4c6:	93 95       	inc	r25
 4c8:	88 0f       	add	r24, r24
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__stack+0x6f>
 4cc:	99 27       	eor	r25, r25
 4ce:	ee 0f       	add	r30, r30
 4d0:	97 95       	ror	r25
 4d2:	87 95       	ror	r24
 4d4:	08 95       	ret

000004d6 <__cmpsf2>:
 4d6:	0e 94 55 03 	call	0x6aa	; 0x6aa <__fp_cmp>
 4da:	08 f4       	brcc	.+2      	; 0x4de <__cmpsf2+0x8>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	08 95       	ret

000004e0 <__divsf3>:
 4e0:	0e 94 84 02 	call	0x508	; 0x508 <__divsf3x>
 4e4:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 4e8:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 4ec:	58 f0       	brcs	.+22     	; 0x504 <__divsf3+0x24>
 4ee:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 4f2:	40 f0       	brcs	.+16     	; 0x504 <__divsf3+0x24>
 4f4:	29 f4       	brne	.+10     	; 0x500 <__divsf3+0x20>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	29 f0       	breq	.+10     	; 0x504 <__divsf3+0x24>
 4fa:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 4fe:	51 11       	cpse	r21, r1
 500:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 504:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>

00000508 <__divsf3x>:
 508:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 50c:	68 f3       	brcs	.-38     	; 0x4e8 <__divsf3+0x8>

0000050e <__divsf3_pse>:
 50e:	99 23       	and	r25, r25
 510:	b1 f3       	breq	.-20     	; 0x4fe <__divsf3+0x1e>
 512:	55 23       	and	r21, r21
 514:	91 f3       	breq	.-28     	; 0x4fa <__divsf3+0x1a>
 516:	95 1b       	sub	r25, r21
 518:	55 0b       	sbc	r21, r21
 51a:	bb 27       	eor	r27, r27
 51c:	aa 27       	eor	r26, r26
 51e:	62 17       	cp	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	38 f0       	brcs	.+14     	; 0x534 <__divsf3_pse+0x26>
 526:	9f 5f       	subi	r25, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	44 1f       	adc	r20, r20
 530:	aa 1f       	adc	r26, r26
 532:	a9 f3       	breq	.-22     	; 0x51e <__divsf3_pse+0x10>
 534:	35 d0       	rcall	.+106    	; 0x5a0 <__divsf3_pse+0x92>
 536:	0e 2e       	mov	r0, r30
 538:	3a f0       	brmi	.+14     	; 0x548 <__divsf3_pse+0x3a>
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	32 d0       	rcall	.+100    	; 0x5a2 <__divsf3_pse+0x94>
 53e:	91 50       	subi	r25, 0x01	; 1
 540:	50 40       	sbci	r21, 0x00	; 0
 542:	e6 95       	lsr	r30
 544:	00 1c       	adc	r0, r0
 546:	ca f7       	brpl	.-14     	; 0x53a <__divsf3_pse+0x2c>
 548:	2b d0       	rcall	.+86     	; 0x5a0 <__divsf3_pse+0x92>
 54a:	fe 2f       	mov	r31, r30
 54c:	29 d0       	rcall	.+82     	; 0x5a0 <__divsf3_pse+0x92>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	bb 1f       	adc	r27, r27
 556:	26 17       	cp	r18, r22
 558:	37 07       	cpc	r19, r23
 55a:	48 07       	cpc	r20, r24
 55c:	ab 07       	cpc	r26, r27
 55e:	b0 e8       	ldi	r27, 0x80	; 128
 560:	09 f0       	breq	.+2      	; 0x564 <__divsf3_pse+0x56>
 562:	bb 0b       	sbc	r27, r27
 564:	80 2d       	mov	r24, r0
 566:	bf 01       	movw	r22, r30
 568:	ff 27       	eor	r31, r31
 56a:	93 58       	subi	r25, 0x83	; 131
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	3a f0       	brmi	.+14     	; 0x57e <__divsf3_pse+0x70>
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	51 05       	cpc	r21, r1
 574:	78 f0       	brcs	.+30     	; 0x594 <__divsf3_pse+0x86>
 576:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 57a:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 57e:	5f 3f       	cpi	r21, 0xFF	; 255
 580:	e4 f3       	brlt	.-8      	; 0x57a <__divsf3_pse+0x6c>
 582:	98 3e       	cpi	r25, 0xE8	; 232
 584:	d4 f3       	brlt	.-12     	; 0x57a <__divsf3_pse+0x6c>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f7 95       	ror	r31
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	c9 f7       	brne	.-14     	; 0x586 <__divsf3_pse+0x78>
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	bb 1f       	adc	r27, r27
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	ba 07       	cpc	r27, r26
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__divsf3_pse+0xae>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	ba 0b       	sbc	r27, r26
 5bc:	ee 1f       	adc	r30, r30
 5be:	88 f7       	brcc	.-30     	; 0x5a2 <__divsf3_pse+0x94>
 5c0:	e0 95       	com	r30
 5c2:	08 95       	ret

000005c4 <__fixsfsi>:
 5c4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 5c8:	68 94       	set
 5ca:	b1 11       	cpse	r27, r1
 5cc:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 5d0:	08 95       	ret

000005d2 <__fixunssfsi>:
 5d2:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_splitA>
 5d6:	88 f0       	brcs	.+34     	; 0x5fa <__fixunssfsi+0x28>
 5d8:	9f 57       	subi	r25, 0x7F	; 127
 5da:	98 f0       	brcs	.+38     	; 0x602 <__fixunssfsi+0x30>
 5dc:	b9 2f       	mov	r27, r25
 5de:	99 27       	eor	r25, r25
 5e0:	b7 51       	subi	r27, 0x17	; 23
 5e2:	b0 f0       	brcs	.+44     	; 0x610 <__fixunssfsi+0x3e>
 5e4:	e1 f0       	breq	.+56     	; 0x61e <__fixunssfsi+0x4c>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	1a f0       	brmi	.+6      	; 0x5f6 <__fixunssfsi+0x24>
 5f0:	ba 95       	dec	r27
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__fixunssfsi+0x14>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fixunssfsi+0x4c>
 5f6:	b1 30       	cpi	r27, 0x01	; 1
 5f8:	91 f0       	breq	.+36     	; 0x61e <__fixunssfsi+0x4c>
 5fa:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_zero>
 5fe:	b1 e0       	ldi	r27, 0x01	; 1
 600:	08 95       	ret
 602:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 606:	67 2f       	mov	r22, r23
 608:	78 2f       	mov	r23, r24
 60a:	88 27       	eor	r24, r24
 60c:	b8 5f       	subi	r27, 0xF8	; 248
 60e:	39 f0       	breq	.+14     	; 0x61e <__fixunssfsi+0x4c>
 610:	b9 3f       	cpi	r27, 0xF9	; 249
 612:	cc f3       	brlt	.-14     	; 0x606 <__fixunssfsi+0x34>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b3 95       	inc	r27
 61c:	d9 f7       	brne	.-10     	; 0x614 <__fixunssfsi+0x42>
 61e:	3e f4       	brtc	.+14     	; 0x62e <__fixunssfsi+0x5c>
 620:	90 95       	com	r25
 622:	80 95       	com	r24
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__floatunsisf>:
 630:	e8 94       	clt
 632:	09 c0       	rjmp	.+18     	; 0x646 <__floatsisf+0x12>

00000634 <__floatsisf>:
 634:	97 fb       	bst	r25, 7
 636:	3e f4       	brtc	.+14     	; 0x646 <__floatsisf+0x12>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	99 23       	and	r25, r25
 648:	a9 f0       	breq	.+42     	; 0x674 <__floatsisf+0x40>
 64a:	f9 2f       	mov	r31, r25
 64c:	96 e9       	ldi	r25, 0x96	; 150
 64e:	bb 27       	eor	r27, r27
 650:	93 95       	inc	r25
 652:	f6 95       	lsr	r31
 654:	87 95       	ror	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f1 11       	cpse	r31, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__floatsisf+0x1c>
 660:	fa f4       	brpl	.+62     	; 0x6a0 <__floatsisf+0x6c>
 662:	bb 0f       	add	r27, r27
 664:	11 f4       	brne	.+4      	; 0x66a <__floatsisf+0x36>
 666:	60 ff       	sbrs	r22, 0
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <__floatsisf+0x6c>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <__floatsisf+0x6c>
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <__floatsisf+0x48>
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__floatsisf+0x6a>
 67c:	77 23       	and	r23, r23
 67e:	21 f0       	breq	.+8      	; 0x688 <__floatsisf+0x54>
 680:	9e e8       	ldi	r25, 0x8E	; 142
 682:	87 2f       	mov	r24, r23
 684:	76 2f       	mov	r23, r22
 686:	05 c0       	rjmp	.+10     	; 0x692 <__floatsisf+0x5e>
 688:	66 23       	and	r22, r22
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__floatsisf+0x74>
 68c:	96 e8       	ldi	r25, 0x86	; 134
 68e:	86 2f       	mov	r24, r22
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__floatsisf+0x6c>
 696:	9a 95       	dec	r25
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	da f7       	brpl	.-10     	; 0x696 <__floatsisf+0x62>
 6a0:	88 0f       	add	r24, r24
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__fp_cmp>:
 6aa:	99 0f       	add	r25, r25
 6ac:	00 08       	sbc	r0, r0
 6ae:	55 0f       	add	r21, r21
 6b0:	aa 0b       	sbc	r26, r26
 6b2:	e0 e8       	ldi	r30, 0x80	; 128
 6b4:	fe ef       	ldi	r31, 0xFE	; 254
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	e8 07       	cpc	r30, r24
 6bc:	f9 07       	cpc	r31, r25
 6be:	c0 f0       	brcs	.+48     	; 0x6f0 <__fp_cmp+0x46>
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	98 f0       	brcs	.+38     	; 0x6f0 <__fp_cmp+0x46>
 6ca:	62 1b       	sub	r22, r18
 6cc:	73 0b       	sbc	r23, r19
 6ce:	84 0b       	sbc	r24, r20
 6d0:	95 0b       	sbc	r25, r21
 6d2:	39 f4       	brne	.+14     	; 0x6e2 <__fp_cmp+0x38>
 6d4:	0a 26       	eor	r0, r26
 6d6:	61 f0       	breq	.+24     	; 0x6f0 <__fp_cmp+0x46>
 6d8:	23 2b       	or	r18, r19
 6da:	24 2b       	or	r18, r20
 6dc:	25 2b       	or	r18, r21
 6de:	21 f4       	brne	.+8      	; 0x6e8 <__fp_cmp+0x3e>
 6e0:	08 95       	ret
 6e2:	0a 26       	eor	r0, r26
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <__fp_cmp+0x3e>
 6e6:	a1 40       	sbci	r26, 0x01	; 1
 6e8:	a6 95       	lsr	r26
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	81 1d       	adc	r24, r1
 6ee:	81 1d       	adc	r24, r1
 6f0:	08 95       	ret

000006f2 <__fp_inf>:
 6f2:	97 f9       	bld	r25, 7
 6f4:	9f 67       	ori	r25, 0x7F	; 127
 6f6:	80 e8       	ldi	r24, 0x80	; 128
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	08 95       	ret

000006fe <__fp_nan>:
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	08 95       	ret

00000704 <__fp_pscA>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	09 06       	cpc	r0, r25
 710:	08 95       	ret

00000712 <__fp_pscB>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	05 06       	cpc	r0, r21
 71e:	08 95       	ret

00000720 <__fp_round>:
 720:	09 2e       	mov	r0, r25
 722:	03 94       	inc	r0
 724:	00 0c       	add	r0, r0
 726:	11 f4       	brne	.+4      	; 0x72c <__fp_round+0xc>
 728:	88 23       	and	r24, r24
 72a:	52 f0       	brmi	.+20     	; 0x740 <__fp_round+0x20>
 72c:	bb 0f       	add	r27, r27
 72e:	40 f4       	brcc	.+16     	; 0x740 <__fp_round+0x20>
 730:	bf 2b       	or	r27, r31
 732:	11 f4       	brne	.+4      	; 0x738 <__fp_round+0x18>
 734:	60 ff       	sbrs	r22, 0
 736:	04 c0       	rjmp	.+8      	; 0x740 <__fp_round+0x20>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__fp_split3>:
 742:	57 fd       	sbrc	r21, 7
 744:	90 58       	subi	r25, 0x80	; 128
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	59 f0       	breq	.+22     	; 0x762 <__fp_splitA+0x10>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	71 f0       	breq	.+28     	; 0x76c <__fp_splitA+0x1a>
 750:	47 95       	ror	r20

00000752 <__fp_splitA>:
 752:	88 0f       	add	r24, r24
 754:	97 fb       	bst	r25, 7
 756:	99 1f       	adc	r25, r25
 758:	61 f0       	breq	.+24     	; 0x772 <__fp_splitA+0x20>
 75a:	9f 3f       	cpi	r25, 0xFF	; 255
 75c:	79 f0       	breq	.+30     	; 0x77c <__fp_splitA+0x2a>
 75e:	87 95       	ror	r24
 760:	08 95       	ret
 762:	12 16       	cp	r1, r18
 764:	13 06       	cpc	r1, r19
 766:	14 06       	cpc	r1, r20
 768:	55 1f       	adc	r21, r21
 76a:	f2 cf       	rjmp	.-28     	; 0x750 <__fp_split3+0xe>
 76c:	46 95       	lsr	r20
 76e:	f1 df       	rcall	.-30     	; 0x752 <__fp_splitA>
 770:	08 c0       	rjmp	.+16     	; 0x782 <__fp_splitA+0x30>
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	99 1f       	adc	r25, r25
 77a:	f1 cf       	rjmp	.-30     	; 0x75e <__fp_splitA+0xc>
 77c:	86 95       	lsr	r24
 77e:	71 05       	cpc	r23, r1
 780:	61 05       	cpc	r22, r1
 782:	08 94       	sec
 784:	08 95       	ret

00000786 <__fp_zero>:
 786:	e8 94       	clt

00000788 <__fp_szero>:
 788:	bb 27       	eor	r27, r27
 78a:	66 27       	eor	r22, r22
 78c:	77 27       	eor	r23, r23
 78e:	cb 01       	movw	r24, r22
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__mulsf3>:
 794:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3x>
 798:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 79c:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 7a0:	38 f0       	brcs	.+14     	; 0x7b0 <__mulsf3+0x1c>
 7a2:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__mulsf3+0x1c>
 7a8:	95 23       	and	r25, r21
 7aa:	11 f0       	breq	.+4      	; 0x7b0 <__mulsf3+0x1c>
 7ac:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 7b0:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 7b4:	11 24       	eor	r1, r1
 7b6:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>

000007ba <__mulsf3x>:
 7ba:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 7be:	70 f3       	brcs	.-36     	; 0x79c <__mulsf3+0x8>

000007c0 <__mulsf3_pse>:
 7c0:	95 9f       	mul	r25, r21
 7c2:	c1 f3       	breq	.-16     	; 0x7b4 <__mulsf3+0x20>
 7c4:	95 0f       	add	r25, r21
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	55 1f       	adc	r21, r21
 7ca:	62 9f       	mul	r22, r18
 7cc:	f0 01       	movw	r30, r0
 7ce:	72 9f       	mul	r23, r18
 7d0:	bb 27       	eor	r27, r27
 7d2:	f0 0d       	add	r31, r0
 7d4:	b1 1d       	adc	r27, r1
 7d6:	63 9f       	mul	r22, r19
 7d8:	aa 27       	eor	r26, r26
 7da:	f0 0d       	add	r31, r0
 7dc:	b1 1d       	adc	r27, r1
 7de:	aa 1f       	adc	r26, r26
 7e0:	64 9f       	mul	r22, r20
 7e2:	66 27       	eor	r22, r22
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	66 1f       	adc	r22, r22
 7ea:	82 9f       	mul	r24, r18
 7ec:	22 27       	eor	r18, r18
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 9f       	mul	r23, r19
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	62 1f       	adc	r22, r18
 7fc:	83 9f       	mul	r24, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	22 1f       	adc	r18, r18
 804:	74 9f       	mul	r23, r20
 806:	33 27       	eor	r19, r19
 808:	a0 0d       	add	r26, r0
 80a:	61 1d       	adc	r22, r1
 80c:	23 1f       	adc	r18, r19
 80e:	84 9f       	mul	r24, r20
 810:	60 0d       	add	r22, r0
 812:	21 1d       	adc	r18, r1
 814:	82 2f       	mov	r24, r18
 816:	76 2f       	mov	r23, r22
 818:	6a 2f       	mov	r22, r26
 81a:	11 24       	eor	r1, r1
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	9a f0       	brmi	.+38     	; 0x848 <__mulsf3_pse+0x88>
 822:	f1 f0       	breq	.+60     	; 0x860 <__mulsf3_pse+0xa0>
 824:	88 23       	and	r24, r24
 826:	4a f0       	brmi	.+18     	; 0x83a <__mulsf3_pse+0x7a>
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	91 50       	subi	r25, 0x01	; 1
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	a9 f7       	brne	.-22     	; 0x824 <__mulsf3_pse+0x64>
 83a:	9e 3f       	cpi	r25, 0xFE	; 254
 83c:	51 05       	cpc	r21, r1
 83e:	80 f0       	brcs	.+32     	; 0x860 <__mulsf3_pse+0xa0>
 840:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 844:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	e4 f3       	brlt	.-8      	; 0x844 <__mulsf3_pse+0x84>
 84c:	98 3e       	cpi	r25, 0xE8	; 232
 84e:	d4 f3       	brlt	.-12     	; 0x844 <__mulsf3_pse+0x84>
 850:	86 95       	lsr	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	e7 95       	ror	r30
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c1 f7       	brne	.-16     	; 0x850 <__mulsf3_pse+0x90>
 860:	fe 2b       	or	r31, r30
 862:	88 0f       	add	r24, r24
 864:	91 1d       	adc	r25, r1
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <__itoa_ncheck>:
 86e:	bb 27       	eor	r27, r27
 870:	4a 30       	cpi	r20, 0x0A	; 10
 872:	31 f4       	brne	.+12     	; 0x880 <__itoa_ncheck+0x12>
 874:	99 23       	and	r25, r25
 876:	22 f4       	brpl	.+8      	; 0x880 <__itoa_ncheck+0x12>
 878:	bd e2       	ldi	r27, 0x2D	; 45
 87a:	90 95       	com	r25
 87c:	81 95       	neg	r24
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	0c 94 43 04 	jmp	0x886	; 0x886 <__utoa_common>

00000884 <__utoa_ncheck>:
 884:	bb 27       	eor	r27, r27

00000886 <__utoa_common>:
 886:	fb 01       	movw	r30, r22
 888:	55 27       	eor	r21, r21
 88a:	aa 27       	eor	r26, r26
 88c:	88 0f       	add	r24, r24
 88e:	99 1f       	adc	r25, r25
 890:	aa 1f       	adc	r26, r26
 892:	a4 17       	cp	r26, r20
 894:	10 f0       	brcs	.+4      	; 0x89a <__utoa_common+0x14>
 896:	a4 1b       	sub	r26, r20
 898:	83 95       	inc	r24
 89a:	50 51       	subi	r21, 0x10	; 16
 89c:	b9 f7       	brne	.-18     	; 0x88c <__utoa_common+0x6>
 89e:	a0 5d       	subi	r26, 0xD0	; 208
 8a0:	aa 33       	cpi	r26, 0x3A	; 58
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <__utoa_common+0x20>
 8a4:	a9 5d       	subi	r26, 0xD9	; 217
 8a6:	a1 93       	st	Z+, r26
 8a8:	00 97       	sbiw	r24, 0x00	; 0
 8aa:	79 f7       	brne	.-34     	; 0x88a <__utoa_common+0x4>
 8ac:	b1 11       	cpse	r27, r1
 8ae:	b1 93       	st	Z+, r27
 8b0:	11 92       	st	Z+, r1
 8b2:	cb 01       	movw	r24, r22
 8b4:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <strrev>

000008b8 <strrev>:
 8b8:	dc 01       	movw	r26, r24
 8ba:	fc 01       	movw	r30, r24
 8bc:	67 2f       	mov	r22, r23
 8be:	71 91       	ld	r23, Z+
 8c0:	77 23       	and	r23, r23
 8c2:	e1 f7       	brne	.-8      	; 0x8bc <strrev+0x4>
 8c4:	32 97       	sbiw	r30, 0x02	; 2
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <strrev+0x18>
 8c8:	7c 91       	ld	r23, X
 8ca:	6d 93       	st	X+, r22
 8cc:	70 83       	st	Z, r23
 8ce:	62 91       	ld	r22, -Z
 8d0:	ae 17       	cp	r26, r30
 8d2:	bf 07       	cpc	r27, r31
 8d4:	c8 f3       	brcs	.-14     	; 0x8c8 <strrev+0x10>
 8d6:	08 95       	ret

000008d8 <_exit>:
 8d8:	f8 94       	cli

000008da <__stop_program>:
 8da:	ff cf       	rjmp	.-2      	; 0x8da <__stop_program>
