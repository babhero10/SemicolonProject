
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000085c  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd3  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091e  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  000020ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  000027c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072f  00000000  00000000  00002d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000349d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 90 00 	call	0x120	; 0x120 <main>
  7a:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <calc>:
 */ 

#include "calculator.h"

float calc(char num1, char num2, char oper)
{
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
	switch (oper)
  8e:	4d 32       	cpi	r20, 0x2D	; 45
  90:	99 f0       	breq	.+38     	; 0xb8 <calc+0x36>
  92:	18 f4       	brcc	.+6      	; 0x9a <calc+0x18>
  94:	4b 32       	cpi	r20, 0x2B	; 43
  96:	31 f0       	breq	.+12     	; 0xa4 <calc+0x22>
  98:	39 c0       	rjmp	.+114    	; 0x10c <calc+0x8a>
  9a:	4f 32       	cpi	r20, 0x2F	; 47
  9c:	11 f1       	breq	.+68     	; 0xe2 <calc+0x60>
  9e:	48 35       	cpi	r20, 0x58	; 88
  a0:	b1 f0       	breq	.+44     	; 0xce <calc+0x4c>
  a2:	34 c0       	rjmp	.+104    	; 0x10c <calc+0x8a>
	{
		case '+':
			return num1 + num2;
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	68 0f       	add	r22, r24
  a8:	71 1d       	adc	r23, r1
  aa:	07 2e       	mov	r0, r23
  ac:	00 0c       	add	r0, r0
  ae:	88 0b       	sbc	r24, r24
  b0:	99 0b       	sbc	r25, r25
  b2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatsisf>
  b6:	2e c0       	rjmp	.+92     	; 0x114 <calc+0x92>
		case '-':
			return num1 - num2;
  b8:	68 2f       	mov	r22, r24
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	6c 1b       	sub	r22, r28
  be:	71 09       	sbc	r23, r1
  c0:	07 2e       	mov	r0, r23
  c2:	00 0c       	add	r0, r0
  c4:	88 0b       	sbc	r24, r24
  c6:	99 0b       	sbc	r25, r25
  c8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatsisf>
  cc:	23 c0       	rjmp	.+70     	; 0x114 <calc+0x92>
		case 'X':
			return num1 * num2;
  ce:	86 9f       	mul	r24, r22
  d0:	b0 01       	movw	r22, r0
  d2:	11 24       	eor	r1, r1
  d4:	07 2e       	mov	r0, r23
  d6:	00 0c       	add	r0, r0
  d8:	88 0b       	sbc	r24, r24
  da:	99 0b       	sbc	r25, r25
  dc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatsisf>
  e0:	19 c0       	rjmp	.+50     	; 0x114 <calc+0x92>
		case '/':
			return ((double)num1) / num2;
  e2:	68 2f       	mov	r22, r24
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__floatunsisf>
  ee:	6b 01       	movw	r12, r22
  f0:	7c 01       	movw	r14, r24
  f2:	6c 2f       	mov	r22, r28
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatsisf>
  fe:	9b 01       	movw	r18, r22
 100:	ac 01       	movw	r20, r24
 102:	c7 01       	movw	r24, r14
 104:	b6 01       	movw	r22, r12
 106:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__divsf3>
 10a:	04 c0       	rjmp	.+8      	; 0x114 <calc+0x92>
		default:
			return -1;
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	9f eb       	ldi	r25, 0xBF	; 191
	}
 114:	cf 91       	pop	r28
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	08 95       	ret

00000120 <main>:
#include "./../ECU/LCD/LCD.h"
#include "./Calculator/calculator.h"

int main(void)
{
    init_LCD();
 120:	0e 94 4d 01 	call	0x29a	; 0x29a <init_LCD>
	init_keypad();
 124:	0e 94 c5 00 	call	0x18a	; 0x18a <init_keypad>
    while (1) 
    {
		while (1)
		{
		
			a = read_input() - '0';
 128:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 12c:	d0 ed       	ldi	r29, 0xD0	; 208
 12e:	d8 0f       	add	r29, r24
			send_int(a);
 130:	8d 2f       	mov	r24, r29
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
			
			o = read_input();
 138:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 13c:	c8 2f       	mov	r28, r24
			if (o == 'C') {
 13e:	83 34       	cpi	r24, 0x43	; 67
 140:	21 f4       	brne	.+8      	; 0x14a <main+0x2a>
				send_command(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
				continue;
 148:	ef cf       	rjmp	.-34     	; 0x128 <main+0x8>
			}
			send_char(o);
 14a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
			
			b = read_input() - '0';
 14e:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
 152:	10 ed       	ldi	r17, 0xD0	; 208
 154:	18 0f       	add	r17, r24
			if (b + '0' == 'C'){
 156:	13 31       	cpi	r17, 0x13	; 19
 158:	21 f4       	brne	.+8      	; 0x162 <main+0x42>
				send_command(0x01);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
				continue;
 160:	e3 cf       	rjmp	.-58     	; 0x128 <main+0x8>
			}
			send_int(b);
 162:	81 2f       	mov	r24, r17
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
			
			send_char('=');
 16a:	8d e3       	ldi	r24, 0x3D	; 61
 16c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
			send_float(calc(a, b, o));
 170:	4c 2f       	mov	r20, r28
 172:	61 2f       	mov	r22, r17
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 41 00 	call	0x82	; 0x82 <calc>
 17a:	0e 94 af 01 	call	0x35e	; 0x35e <send_float>
			read_input();		
 17e:	0e 94 cc 00 	call	0x198	; 0x198 <read_input>
			send_command(0x01);	
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
 188:	cf cf       	rjmp	.-98     	; 0x128 <main+0x8>

0000018a <init_keypad>:
	{'C','0','=','/'}
};*/

void init_keypad()
{
	KEYPAD_DDR = 0x00;
 18a:	11 ba       	out	0x11, r1	; 17
	KEYPAD_DDR |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	8f 60       	ori	r24, 0x0F	; 15
 190:	81 bb       	out	0x11, r24	; 17
	
	KEYPAD_PORT = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	82 bb       	out	0x12, r24	; 18
 196:	08 95       	ret

00000198 <read_input>:
}

unsigned char read_input()
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	unsigned char x = -1, y = -1;
	bool c = 1;
 19c:	71 e0       	ldi	r23, 0x01	; 1
	KEYPAD_PORT = 0xFF;
}

unsigned char read_input()
{
	unsigned char x = -1, y = -1;
 19e:	df ef       	ldi	r29, 0xFF	; 255
 1a0:	cf ef       	ldi	r28, 0xFF	; 255
	bool c = 1;
	while (1)
	{
		for (unsigned char i = 0; i < 4; i++)
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	5b c0       	rjmp	.+182    	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			KEYPAD_PORT &= ~(1 << i);
 1a6:	42 b3       	in	r20, 0x12	; 18
 1a8:	86 2f       	mov	r24, r22
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	06 2e       	mov	r0, r22
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <read_input+0x20>
 1b4:	22 0f       	add	r18, r18
 1b6:	33 1f       	adc	r19, r19
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <read_input+0x1c>
 1bc:	20 95       	com	r18
 1be:	24 23       	and	r18, r20
 1c0:	22 bb       	out	0x12, r18	; 18
			KEYPAD_PORT |= (1 << ((i + 3) % 4));
 1c2:	42 b3       	in	r20, 0x12	; 18
 1c4:	03 96       	adiw	r24, 0x03	; 3
 1c6:	83 70       	andi	r24, 0x03	; 3
 1c8:	90 78       	andi	r25, 0x80	; 128
 1ca:	99 23       	and	r25, r25
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <read_input+0x3e>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	8c 6f       	ori	r24, 0xFC	; 252
 1d2:	9f 6f       	ori	r25, 0xFF	; 255
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <read_input+0x4a>
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	8a 95       	dec	r24
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <read_input+0x46>
 1e6:	cf 01       	movw	r24, r30
 1e8:	84 2b       	or	r24, r20
 1ea:	82 bb       	out	0x12, r24	; 18
			
			for (unsigned char j = 0; j < 4; j++)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	1d c0       	rjmp	.+58     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				if ((KEYPAD_PIN & (1 << (j + 4))) == 0)
 1f0:	80 b3       	in	r24, 0x10	; 16
 1f2:	42 2f       	mov	r20, r18
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	4c 5f       	subi	r20, 0xFC	; 252
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	04 2e       	mov	r0, r20
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <__EEPROM_REGION_LENGTH__>
 208:	80 fd       	sbrc	r24, 0
 20a:	0e c0       	rjmp	.+28     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
				{
					while ((KEYPAD_PIN & (1 << (j + 4))) == 0);
 20c:	80 b3       	in	r24, 0x10	; 16
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	04 2e       	mov	r0, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 21c:	80 ff       	sbrs	r24, 0
 21e:	f6 cf       	rjmp	.-20     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
					x = i;
					y = j;
 220:	d2 2f       	mov	r29, r18
			for (unsigned char j = 0; j < 4; j++)
			{
				if ((KEYPAD_PIN & (1 << (j + 4))) == 0)
				{
					while ((KEYPAD_PIN & (1 << (j + 4))) == 0);
					x = i;
 222:	c6 2f       	mov	r28, r22
					y = j;
					c = 0;
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	03 c0       	rjmp	.+6      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
		for (unsigned char i = 0; i < 4; i++)
		{
			KEYPAD_PORT &= ~(1 << i);
			KEYPAD_PORT |= (1 << ((i + 3) % 4));
			
			for (unsigned char j = 0; j < 4; j++)
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	24 30       	cpi	r18, 0x04	; 4
 22c:	08 f3       	brcs	.-62     	; 0x1f0 <read_input+0x58>
					c = 0;
					break;		
				}
			}
			
			if (c == 0)
 22e:	71 11       	cpse	r23, r1
 230:	0e c0       	rjmp	.+28     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				init_keypad();
 232:	0e 94 c5 00 	call	0x18a	; 0x18a <init_keypad>
				return KEYPAD[x][y];
 236:	ec 2f       	mov	r30, r28
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 5a       	subi	r30, 0xA0	; 160
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	ed 0f       	add	r30, r29
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	0b c0       	rjmp	.+22     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 256:	00 c0       	rjmp	.+0      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 258:	00 00       	nop
{
	unsigned char x = -1, y = -1;
	bool c = 1;
	while (1)
	{
		for (unsigned char i = 0; i < 4; i++)
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	64 30       	cpi	r22, 0x04	; 4
 25e:	08 f4       	brcc	.+2      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 260:	a2 cf       	rjmp	.-188    	; 0x1a6 <read_input+0xe>
 262:	9f cf       	rjmp	.-194    	; 0x1a2 <read_input+0xa>
			
			_delay_ms(1);
			
		}
	}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <send_command>:

#include "LCD.h"

void send_command(unsigned char cmd)
{
	SCRIPT_PORT = 0x00;
 26a:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT &= ~(1 << RS);
 26c:	9b b3       	in	r25, 0x1b	; 27
 26e:	9d 7f       	andi	r25, 0xFD	; 253
 270:	9b bb       	out	0x1b, r25	; 27
	SCRIPT_PORT = cmd;	
 272:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	81 60       	ori	r24, 0x01	; 1
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	89 ef       	ldi	r24, 0xF9	; 249
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <send_command+0x14>
 282:	00 c0       	rjmp	.+0      	; 0x284 <send_command+0x1a>
 284:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	8e 7f       	andi	r24, 0xFE	; 254
 28a:	8b bb       	out	0x1b, r24	; 27
 28c:	83 ec       	ldi	r24, 0xC3	; 195
 28e:	99 e0       	ldi	r25, 0x09	; 9
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <send_command+0x26>
 294:	00 c0       	rjmp	.+0      	; 0x296 <send_command+0x2c>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <init_LCD>:
	_delay_ms(10);
}

void init_LCD()
{
	SCRIPT_DDR = 0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 bb       	out	0x14, r24	; 20
	CONTROL_DDR |= (1 << EN) | (1 << RS);
 29e:	8a b3       	in	r24, 0x1a	; 26
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	8a bb       	out	0x1a, r24	; 26
	send_command(0x01);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
	send_command(0x38);
 2aa:	88 e3       	ldi	r24, 0x38	; 56
 2ac:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
	send_command(0x0E);
 2b0:	8e e0       	ldi	r24, 0x0E	; 14
 2b2:	0e 94 35 01 	call	0x26a	; 0x26a <send_command>
 2b6:	08 95       	ret

000002b8 <send_char>:
}

void send_char(char c)
{
	SCRIPT_PORT = 0x00;
 2b8:	15 ba       	out	0x15, r1	; 21
	CONTROL_PORT |= (1 << RS);
 2ba:	9b b3       	in	r25, 0x1b	; 27
 2bc:	92 60       	ori	r25, 0x02	; 2
 2be:	9b bb       	out	0x1b, r25	; 27
	SCRIPT_PORT = c;
 2c0:	85 bb       	out	0x15, r24	; 21
	
	CONTROL_PORT |= (1 << EN);
 2c2:	8b b3       	in	r24, 0x1b	; 27
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	89 ef       	ldi	r24, 0xF9	; 249
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <send_char+0x14>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <send_char+0x1a>
 2d2:	00 00       	nop
	_delay_ms(1);
	CONTROL_PORT &= ~(1 << EN);
 2d4:	8b b3       	in	r24, 0x1b	; 27
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	83 ec       	ldi	r24, 0xC3	; 195
 2dc:	99 e0       	ldi	r25, 0x09	; 9
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <send_char+0x26>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <send_char+0x2c>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <send_string>:
	
	_delay_ms(10);
}

void send_string(char s[])
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
	for (int i = 0; i < strlen(s); i++)
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <send_string+0x1e>
	{
		send_char(s[i]);
 2f8:	f8 01       	movw	r30, r16
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
	_delay_ms(10);
}

void send_string(char s[])
{
	for (int i = 0; i < strlen(s); i++)
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	f8 01       	movw	r30, r16
 308:	01 90       	ld	r0, Z+
 30a:	00 20       	and	r0, r0
 30c:	e9 f7       	brne	.-6      	; 0x308 <send_string+0x20>
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	e0 1b       	sub	r30, r16
 312:	f1 0b       	sbc	r31, r17
 314:	ce 17       	cp	r28, r30
 316:	df 07       	cpc	r29, r31
 318:	78 f3       	brcs	.-34     	; 0x2f8 <send_string+0x10>
	{
		send_char(s[i]);
	}
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <send_int>:

void send_int(int i)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	61 97       	sbiw	r28, 0x11	; 17
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__itoa_ncheck>
	char s[17];
	itoa(i, s, 10);
	send_string(s);
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 74 01 	call	0x2e8	; 0x2e8 <send_string>
}
 34c:	61 96       	adiw	r28, 0x11	; 17
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <send_float>:

void send_float(float n)
{
 35e:	8f 92       	push	r8
 360:	9f 92       	push	r9
 362:	af 92       	push	r10
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	4b 01       	movw	r8, r22
 370:	5c 01       	movw	r10, r24
	// Extract integer part
	char ipart = (int)n;
 372:	0e 94 c6 02 	call	0x58c	; 0x58c <__fixsfsi>
 376:	6b 01       	movw	r12, r22
 378:	7c 01       	movw	r14, r24
	
	// Extract floating part
	char fpart = (n - (float)ipart) * 100;
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__floatunsisf>
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	c5 01       	movw	r24, r10
 38a:	b4 01       	movw	r22, r8
 38c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__subsf3>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	48 ec       	ldi	r20, 0xC8	; 200
 396:	52 e4       	ldi	r21, 0x42	; 66
 398:	0e 94 8a 03 	call	0x714	; 0x714 <__mulsf3>
 39c:	0e 94 cd 02 	call	0x59a	; 0x59a <__fixunssfsi>
 3a0:	b6 2e       	mov	r11, r22
	
	send_int(ipart);
 3a2:	c6 01       	movw	r24, r12
 3a4:	99 27       	eor	r25, r25
 3a6:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
	if (fpart == 0) return;
 3aa:	bb 20       	and	r11, r11
 3ac:	39 f0       	breq	.+14     	; 0x3bc <send_float+0x5e>
	send_char('.');
 3ae:	8e e2       	ldi	r24, 0x2E	; 46
 3b0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <send_char>
	send_int(fpart);
 3b4:	8b 2d       	mov	r24, r11
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 92 01 	call	0x324	; 0x324 <send_int>
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	08 95       	ret

000003ce <__subsf3>:
 3ce:	50 58       	subi	r21, 0x80	; 128

000003d0 <__addsf3>:
 3d0:	bb 27       	eor	r27, r27
 3d2:	aa 27       	eor	r26, r26
 3d4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__addsf3x>
 3d8:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 3dc:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 3e0:	38 f0       	brcs	.+14     	; 0x3f0 <__addsf3+0x20>
 3e2:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <__addsf3+0x20>
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <__addsf3+0x28>
 3ea:	9f 3f       	cpi	r25, 0xFF	; 255
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <__addsf3+0x24>
 3ee:	26 f4       	brtc	.+8      	; 0x3f8 <__addsf3+0x28>
 3f0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>
 3f4:	0e f4       	brtc	.+2      	; 0x3f8 <__addsf3+0x28>
 3f6:	e0 95       	com	r30
 3f8:	e7 fb       	bst	r30, 7
 3fa:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>

000003fe <__addsf3x>:
 3fe:	e9 2f       	mov	r30, r25
 400:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_split3>
 404:	58 f3       	brcs	.-42     	; 0x3dc <__addsf3+0xc>
 406:	ba 17       	cp	r27, r26
 408:	62 07       	cpc	r22, r18
 40a:	73 07       	cpc	r23, r19
 40c:	84 07       	cpc	r24, r20
 40e:	95 07       	cpc	r25, r21
 410:	20 f0       	brcs	.+8      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 412:	79 f4       	brne	.+30     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 414:	a6 f5       	brtc	.+104    	; 0x47e <__stack+0x1f>
 416:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_zero>
 41a:	0e f4       	brtc	.+2      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 41c:	e0 95       	com	r30
 41e:	0b 2e       	mov	r0, r27
 420:	ba 2f       	mov	r27, r26
 422:	a0 2d       	mov	r26, r0
 424:	0b 01       	movw	r0, r22
 426:	b9 01       	movw	r22, r18
 428:	90 01       	movw	r18, r0
 42a:	0c 01       	movw	r0, r24
 42c:	ca 01       	movw	r24, r20
 42e:	a0 01       	movw	r20, r0
 430:	11 24       	eor	r1, r1
 432:	ff 27       	eor	r31, r31
 434:	59 1b       	sub	r21, r25
 436:	99 f0       	breq	.+38     	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 438:	59 3f       	cpi	r21, 0xF9	; 249
 43a:	50 f4       	brcc	.+20     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 43c:	50 3e       	cpi	r21, 0xE0	; 224
 43e:	68 f1       	brcs	.+90     	; 0x49a <__stack+0x3b>
 440:	1a 16       	cp	r1, r26
 442:	f0 40       	sbci	r31, 0x00	; 0
 444:	a2 2f       	mov	r26, r18
 446:	23 2f       	mov	r18, r19
 448:	34 2f       	mov	r19, r20
 44a:	44 27       	eor	r20, r20
 44c:	58 5f       	subi	r21, 0xF8	; 248
 44e:	f3 cf       	rjmp	.-26     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 450:	46 95       	lsr	r20
 452:	37 95       	ror	r19
 454:	27 95       	ror	r18
 456:	a7 95       	ror	r26
 458:	f0 40       	sbci	r31, 0x00	; 0
 45a:	53 95       	inc	r21
 45c:	c9 f7       	brne	.-14     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 45e:	7e f4       	brtc	.+30     	; 0x47e <__stack+0x1f>
 460:	1f 16       	cp	r1, r31
 462:	ba 0b       	sbc	r27, r26
 464:	62 0b       	sbc	r22, r18
 466:	73 0b       	sbc	r23, r19
 468:	84 0b       	sbc	r24, r20
 46a:	ba f0       	brmi	.+46     	; 0x49a <__stack+0x3b>
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	a1 f0       	breq	.+40     	; 0x498 <__stack+0x39>
 470:	ff 0f       	add	r31, r31
 472:	bb 1f       	adc	r27, r27
 474:	66 1f       	adc	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	c2 f7       	brpl	.-16     	; 0x46c <__stack+0xd>
 47c:	0e c0       	rjmp	.+28     	; 0x49a <__stack+0x3b>
 47e:	ba 0f       	add	r27, r26
 480:	62 1f       	adc	r22, r18
 482:	73 1f       	adc	r23, r19
 484:	84 1f       	adc	r24, r20
 486:	48 f4       	brcc	.+18     	; 0x49a <__stack+0x3b>
 488:	87 95       	ror	r24
 48a:	77 95       	ror	r23
 48c:	67 95       	ror	r22
 48e:	b7 95       	ror	r27
 490:	f7 95       	ror	r31
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	08 f0       	brcs	.+2      	; 0x498 <__stack+0x39>
 496:	b0 cf       	rjmp	.-160    	; 0x3f8 <__addsf3+0x28>
 498:	93 95       	inc	r25
 49a:	88 0f       	add	r24, r24
 49c:	08 f0       	brcs	.+2      	; 0x4a0 <__stack+0x41>
 49e:	99 27       	eor	r25, r25
 4a0:	ee 0f       	add	r30, r30
 4a2:	97 95       	ror	r25
 4a4:	87 95       	ror	r24
 4a6:	08 95       	ret

000004a8 <__divsf3>:
 4a8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__divsf3x>
 4ac:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 4b0:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 4b4:	58 f0       	brcs	.+22     	; 0x4cc <__divsf3+0x24>
 4b6:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 4ba:	40 f0       	brcs	.+16     	; 0x4cc <__divsf3+0x24>
 4bc:	29 f4       	brne	.+10     	; 0x4c8 <__divsf3+0x20>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	29 f0       	breq	.+10     	; 0x4cc <__divsf3+0x24>
 4c2:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 4c6:	51 11       	cpse	r21, r1
 4c8:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 4cc:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>

000004d0 <__divsf3x>:
 4d0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_split3>
 4d4:	68 f3       	brcs	.-38     	; 0x4b0 <__divsf3+0x8>

000004d6 <__divsf3_pse>:
 4d6:	99 23       	and	r25, r25
 4d8:	b1 f3       	breq	.-20     	; 0x4c6 <__divsf3+0x1e>
 4da:	55 23       	and	r21, r21
 4dc:	91 f3       	breq	.-28     	; 0x4c2 <__divsf3+0x1a>
 4de:	95 1b       	sub	r25, r21
 4e0:	55 0b       	sbc	r21, r21
 4e2:	bb 27       	eor	r27, r27
 4e4:	aa 27       	eor	r26, r26
 4e6:	62 17       	cp	r22, r18
 4e8:	73 07       	cpc	r23, r19
 4ea:	84 07       	cpc	r24, r20
 4ec:	38 f0       	brcs	.+14     	; 0x4fc <__divsf3_pse+0x26>
 4ee:	9f 5f       	subi	r25, 0xFF	; 255
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	44 1f       	adc	r20, r20
 4f8:	aa 1f       	adc	r26, r26
 4fa:	a9 f3       	breq	.-22     	; 0x4e6 <__divsf3_pse+0x10>
 4fc:	35 d0       	rcall	.+106    	; 0x568 <__divsf3_pse+0x92>
 4fe:	0e 2e       	mov	r0, r30
 500:	3a f0       	brmi	.+14     	; 0x510 <__divsf3_pse+0x3a>
 502:	e0 e8       	ldi	r30, 0x80	; 128
 504:	32 d0       	rcall	.+100    	; 0x56a <__divsf3_pse+0x94>
 506:	91 50       	subi	r25, 0x01	; 1
 508:	50 40       	sbci	r21, 0x00	; 0
 50a:	e6 95       	lsr	r30
 50c:	00 1c       	adc	r0, r0
 50e:	ca f7       	brpl	.-14     	; 0x502 <__divsf3_pse+0x2c>
 510:	2b d0       	rcall	.+86     	; 0x568 <__divsf3_pse+0x92>
 512:	fe 2f       	mov	r31, r30
 514:	29 d0       	rcall	.+82     	; 0x568 <__divsf3_pse+0x92>
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	bb 1f       	adc	r27, r27
 51e:	26 17       	cp	r18, r22
 520:	37 07       	cpc	r19, r23
 522:	48 07       	cpc	r20, r24
 524:	ab 07       	cpc	r26, r27
 526:	b0 e8       	ldi	r27, 0x80	; 128
 528:	09 f0       	breq	.+2      	; 0x52c <__divsf3_pse+0x56>
 52a:	bb 0b       	sbc	r27, r27
 52c:	80 2d       	mov	r24, r0
 52e:	bf 01       	movw	r22, r30
 530:	ff 27       	eor	r31, r31
 532:	93 58       	subi	r25, 0x83	; 131
 534:	5f 4f       	sbci	r21, 0xFF	; 255
 536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x70>
 538:	9e 3f       	cpi	r25, 0xFE	; 254
 53a:	51 05       	cpc	r21, r1
 53c:	78 f0       	brcs	.+30     	; 0x55c <__divsf3_pse+0x86>
 53e:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 542:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 546:	5f 3f       	cpi	r21, 0xFF	; 255
 548:	e4 f3       	brlt	.-8      	; 0x542 <__divsf3_pse+0x6c>
 54a:	98 3e       	cpi	r25, 0xE8	; 232
 54c:	d4 f3       	brlt	.-12     	; 0x542 <__divsf3_pse+0x6c>
 54e:	86 95       	lsr	r24
 550:	77 95       	ror	r23
 552:	67 95       	ror	r22
 554:	b7 95       	ror	r27
 556:	f7 95       	ror	r31
 558:	9f 5f       	subi	r25, 0xFF	; 255
 55a:	c9 f7       	brne	.-14     	; 0x54e <__divsf3_pse+0x78>
 55c:	88 0f       	add	r24, r24
 55e:	91 1d       	adc	r25, r1
 560:	96 95       	lsr	r25
 562:	87 95       	ror	r24
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret
 568:	e1 e0       	ldi	r30, 0x01	; 1
 56a:	66 0f       	add	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	bb 1f       	adc	r27, r27
 572:	62 17       	cp	r22, r18
 574:	73 07       	cpc	r23, r19
 576:	84 07       	cpc	r24, r20
 578:	ba 07       	cpc	r27, r26
 57a:	20 f0       	brcs	.+8      	; 0x584 <__divsf3_pse+0xae>
 57c:	62 1b       	sub	r22, r18
 57e:	73 0b       	sbc	r23, r19
 580:	84 0b       	sbc	r24, r20
 582:	ba 0b       	sbc	r27, r26
 584:	ee 1f       	adc	r30, r30
 586:	88 f7       	brcc	.-30     	; 0x56a <__divsf3_pse+0x94>
 588:	e0 95       	com	r30
 58a:	08 95       	ret

0000058c <__fixsfsi>:
 58c:	0e 94 cd 02 	call	0x59a	; 0x59a <__fixunssfsi>
 590:	68 94       	set
 592:	b1 11       	cpse	r27, r1
 594:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 598:	08 95       	ret

0000059a <__fixunssfsi>:
 59a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_splitA>
 59e:	88 f0       	brcs	.+34     	; 0x5c2 <__fixunssfsi+0x28>
 5a0:	9f 57       	subi	r25, 0x7F	; 127
 5a2:	98 f0       	brcs	.+38     	; 0x5ca <__fixunssfsi+0x30>
 5a4:	b9 2f       	mov	r27, r25
 5a6:	99 27       	eor	r25, r25
 5a8:	b7 51       	subi	r27, 0x17	; 23
 5aa:	b0 f0       	brcs	.+44     	; 0x5d8 <__fixunssfsi+0x3e>
 5ac:	e1 f0       	breq	.+56     	; 0x5e6 <__fixunssfsi+0x4c>
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a f0       	brmi	.+6      	; 0x5be <__fixunssfsi+0x24>
 5b8:	ba 95       	dec	r27
 5ba:	c9 f7       	brne	.-14     	; 0x5ae <__fixunssfsi+0x14>
 5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <__fixunssfsi+0x4c>
 5be:	b1 30       	cpi	r27, 0x01	; 1
 5c0:	91 f0       	breq	.+36     	; 0x5e6 <__fixunssfsi+0x4c>
 5c2:	0e 94 83 03 	call	0x706	; 0x706 <__fp_zero>
 5c6:	b1 e0       	ldi	r27, 0x01	; 1
 5c8:	08 95       	ret
 5ca:	0c 94 83 03 	jmp	0x706	; 0x706 <__fp_zero>
 5ce:	67 2f       	mov	r22, r23
 5d0:	78 2f       	mov	r23, r24
 5d2:	88 27       	eor	r24, r24
 5d4:	b8 5f       	subi	r27, 0xF8	; 248
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <__fixunssfsi+0x4c>
 5d8:	b9 3f       	cpi	r27, 0xF9	; 249
 5da:	cc f3       	brlt	.-14     	; 0x5ce <__fixunssfsi+0x34>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b3 95       	inc	r27
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <__fixunssfsi+0x42>
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__fixunssfsi+0x5c>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__floatunsisf>:
 5f8:	e8 94       	clt
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <__floatsisf+0x12>

000005fc <__floatsisf>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	3e f4       	brtc	.+14     	; 0x60e <__floatsisf+0x12>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	99 23       	and	r25, r25
 610:	a9 f0       	breq	.+42     	; 0x63c <__floatsisf+0x40>
 612:	f9 2f       	mov	r31, r25
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	bb 27       	eor	r27, r27
 618:	93 95       	inc	r25
 61a:	f6 95       	lsr	r31
 61c:	87 95       	ror	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f1 11       	cpse	r31, r1
 626:	f8 cf       	rjmp	.-16     	; 0x618 <__floatsisf+0x1c>
 628:	fa f4       	brpl	.+62     	; 0x668 <__floatsisf+0x6c>
 62a:	bb 0f       	add	r27, r27
 62c:	11 f4       	brne	.+4      	; 0x632 <__floatsisf+0x36>
 62e:	60 ff       	sbrs	r22, 0
 630:	1b c0       	rjmp	.+54     	; 0x668 <__floatsisf+0x6c>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	16 c0       	rjmp	.+44     	; 0x668 <__floatsisf+0x6c>
 63c:	88 23       	and	r24, r24
 63e:	11 f0       	breq	.+4      	; 0x644 <__floatsisf+0x48>
 640:	96 e9       	ldi	r25, 0x96	; 150
 642:	11 c0       	rjmp	.+34     	; 0x666 <__floatsisf+0x6a>
 644:	77 23       	and	r23, r23
 646:	21 f0       	breq	.+8      	; 0x650 <__floatsisf+0x54>
 648:	9e e8       	ldi	r25, 0x8E	; 142
 64a:	87 2f       	mov	r24, r23
 64c:	76 2f       	mov	r23, r22
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__floatsisf+0x5e>
 650:	66 23       	and	r22, r22
 652:	71 f0       	breq	.+28     	; 0x670 <__floatsisf+0x74>
 654:	96 e8       	ldi	r25, 0x86	; 134
 656:	86 2f       	mov	r24, r22
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	2a f0       	brmi	.+10     	; 0x668 <__floatsisf+0x6c>
 65e:	9a 95       	dec	r25
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	da f7       	brpl	.-10     	; 0x65e <__floatsisf+0x62>
 668:	88 0f       	add	r24, r24
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_inf>:
 672:	97 f9       	bld	r25, 7
 674:	9f 67       	ori	r25, 0x7F	; 127
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	08 95       	ret

0000067e <__fp_nan>:
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	80 ec       	ldi	r24, 0xC0	; 192
 682:	08 95       	ret

00000684 <__fp_pscA>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	09 06       	cpc	r0, r25
 690:	08 95       	ret

00000692 <__fp_pscB>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	05 06       	cpc	r0, r21
 69e:	08 95       	ret

000006a0 <__fp_round>:
 6a0:	09 2e       	mov	r0, r25
 6a2:	03 94       	inc	r0
 6a4:	00 0c       	add	r0, r0
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0xc>
 6a8:	88 23       	and	r24, r24
 6aa:	52 f0       	brmi	.+20     	; 0x6c0 <__fp_round+0x20>
 6ac:	bb 0f       	add	r27, r27
 6ae:	40 f4       	brcc	.+16     	; 0x6c0 <__fp_round+0x20>
 6b0:	bf 2b       	or	r27, r31
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0x18>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__fp_round+0x20>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__fp_split3>:
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	90 58       	subi	r25, 0x80	; 128
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <__fp_splitA+0x10>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__fp_splitA+0x1a>
 6d0:	47 95       	ror	r20

000006d2 <__fp_splitA>:
 6d2:	88 0f       	add	r24, r24
 6d4:	97 fb       	bst	r25, 7
 6d6:	99 1f       	adc	r25, r25
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <__fp_splitA+0x20>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	79 f0       	breq	.+30     	; 0x6fc <__fp_splitA+0x2a>
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <__fp_split3+0xe>
 6ec:	46 95       	lsr	r20
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <__fp_splitA>
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <__fp_splitA+0x30>
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f1 cf       	rjmp	.-30     	; 0x6de <__fp_splitA+0xc>
 6fc:	86 95       	lsr	r24
 6fe:	71 05       	cpc	r23, r1
 700:	61 05       	cpc	r22, r1
 702:	08 94       	sec
 704:	08 95       	ret

00000706 <__fp_zero>:
 706:	e8 94       	clt

00000708 <__fp_szero>:
 708:	bb 27       	eor	r27, r27
 70a:	66 27       	eor	r22, r22
 70c:	77 27       	eor	r23, r23
 70e:	cb 01       	movw	r24, r22
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <__mulsf3>:
 714:	0e 94 9d 03 	call	0x73a	; 0x73a <__mulsf3x>
 718:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__fp_round>
 71c:	0e 94 42 03 	call	0x684	; 0x684 <__fp_pscA>
 720:	38 f0       	brcs	.+14     	; 0x730 <__mulsf3+0x1c>
 722:	0e 94 49 03 	call	0x692	; 0x692 <__fp_pscB>
 726:	20 f0       	brcs	.+8      	; 0x730 <__mulsf3+0x1c>
 728:	95 23       	and	r25, r21
 72a:	11 f0       	breq	.+4      	; 0x730 <__mulsf3+0x1c>
 72c:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 730:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_nan>
 734:	11 24       	eor	r1, r1
 736:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>

0000073a <__mulsf3x>:
 73a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fp_split3>
 73e:	70 f3       	brcs	.-36     	; 0x71c <__mulsf3+0x8>

00000740 <__mulsf3_pse>:
 740:	95 9f       	mul	r25, r21
 742:	c1 f3       	breq	.-16     	; 0x734 <__mulsf3+0x20>
 744:	95 0f       	add	r25, r21
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	55 1f       	adc	r21, r21
 74a:	62 9f       	mul	r22, r18
 74c:	f0 01       	movw	r30, r0
 74e:	72 9f       	mul	r23, r18
 750:	bb 27       	eor	r27, r27
 752:	f0 0d       	add	r31, r0
 754:	b1 1d       	adc	r27, r1
 756:	63 9f       	mul	r22, r19
 758:	aa 27       	eor	r26, r26
 75a:	f0 0d       	add	r31, r0
 75c:	b1 1d       	adc	r27, r1
 75e:	aa 1f       	adc	r26, r26
 760:	64 9f       	mul	r22, r20
 762:	66 27       	eor	r22, r22
 764:	b0 0d       	add	r27, r0
 766:	a1 1d       	adc	r26, r1
 768:	66 1f       	adc	r22, r22
 76a:	82 9f       	mul	r24, r18
 76c:	22 27       	eor	r18, r18
 76e:	b0 0d       	add	r27, r0
 770:	a1 1d       	adc	r26, r1
 772:	62 1f       	adc	r22, r18
 774:	73 9f       	mul	r23, r19
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	62 1f       	adc	r22, r18
 77c:	83 9f       	mul	r24, r19
 77e:	a0 0d       	add	r26, r0
 780:	61 1d       	adc	r22, r1
 782:	22 1f       	adc	r18, r18
 784:	74 9f       	mul	r23, r20
 786:	33 27       	eor	r19, r19
 788:	a0 0d       	add	r26, r0
 78a:	61 1d       	adc	r22, r1
 78c:	23 1f       	adc	r18, r19
 78e:	84 9f       	mul	r24, r20
 790:	60 0d       	add	r22, r0
 792:	21 1d       	adc	r18, r1
 794:	82 2f       	mov	r24, r18
 796:	76 2f       	mov	r23, r22
 798:	6a 2f       	mov	r22, r26
 79a:	11 24       	eor	r1, r1
 79c:	9f 57       	subi	r25, 0x7F	; 127
 79e:	50 40       	sbci	r21, 0x00	; 0
 7a0:	9a f0       	brmi	.+38     	; 0x7c8 <__mulsf3_pse+0x88>
 7a2:	f1 f0       	breq	.+60     	; 0x7e0 <__mulsf3_pse+0xa0>
 7a4:	88 23       	and	r24, r24
 7a6:	4a f0       	brmi	.+18     	; 0x7ba <__mulsf3_pse+0x7a>
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	bb 1f       	adc	r27, r27
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	91 50       	subi	r25, 0x01	; 1
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	a9 f7       	brne	.-22     	; 0x7a4 <__mulsf3_pse+0x64>
 7ba:	9e 3f       	cpi	r25, 0xFE	; 254
 7bc:	51 05       	cpc	r21, r1
 7be:	80 f0       	brcs	.+32     	; 0x7e0 <__mulsf3_pse+0xa0>
 7c0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_inf>
 7c4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_szero>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	e4 f3       	brlt	.-8      	; 0x7c4 <__mulsf3_pse+0x84>
 7cc:	98 3e       	cpi	r25, 0xE8	; 232
 7ce:	d4 f3       	brlt	.-12     	; 0x7c4 <__mulsf3_pse+0x84>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f7 95       	ror	r31
 7da:	e7 95       	ror	r30
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <__mulsf3_pse+0x90>
 7e0:	fe 2b       	or	r31, r30
 7e2:	88 0f       	add	r24, r24
 7e4:	91 1d       	adc	r25, r1
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__itoa_ncheck>:
 7ee:	bb 27       	eor	r27, r27
 7f0:	4a 30       	cpi	r20, 0x0A	; 10
 7f2:	31 f4       	brne	.+12     	; 0x800 <__itoa_ncheck+0x12>
 7f4:	99 23       	and	r25, r25
 7f6:	22 f4       	brpl	.+8      	; 0x800 <__itoa_ncheck+0x12>
 7f8:	bd e2       	ldi	r27, 0x2D	; 45
 7fa:	90 95       	com	r25
 7fc:	81 95       	neg	r24
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	0c 94 03 04 	jmp	0x806	; 0x806 <__utoa_common>

00000804 <__utoa_ncheck>:
 804:	bb 27       	eor	r27, r27

00000806 <__utoa_common>:
 806:	fb 01       	movw	r30, r22
 808:	55 27       	eor	r21, r21
 80a:	aa 27       	eor	r26, r26
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	aa 1f       	adc	r26, r26
 812:	a4 17       	cp	r26, r20
 814:	10 f0       	brcs	.+4      	; 0x81a <__utoa_common+0x14>
 816:	a4 1b       	sub	r26, r20
 818:	83 95       	inc	r24
 81a:	50 51       	subi	r21, 0x10	; 16
 81c:	b9 f7       	brne	.-18     	; 0x80c <__utoa_common+0x6>
 81e:	a0 5d       	subi	r26, 0xD0	; 208
 820:	aa 33       	cpi	r26, 0x3A	; 58
 822:	08 f0       	brcs	.+2      	; 0x826 <__utoa_common+0x20>
 824:	a9 5d       	subi	r26, 0xD9	; 217
 826:	a1 93       	st	Z+, r26
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	79 f7       	brne	.-34     	; 0x80a <__utoa_common+0x4>
 82c:	b1 11       	cpse	r27, r1
 82e:	b1 93       	st	Z+, r27
 830:	11 92       	st	Z+, r1
 832:	cb 01       	movw	r24, r22
 834:	0c 94 1c 04 	jmp	0x838	; 0x838 <strrev>

00000838 <strrev>:
 838:	dc 01       	movw	r26, r24
 83a:	fc 01       	movw	r30, r24
 83c:	67 2f       	mov	r22, r23
 83e:	71 91       	ld	r23, Z+
 840:	77 23       	and	r23, r23
 842:	e1 f7       	brne	.-8      	; 0x83c <strrev+0x4>
 844:	32 97       	sbiw	r30, 0x02	; 2
 846:	04 c0       	rjmp	.+8      	; 0x850 <strrev+0x18>
 848:	7c 91       	ld	r23, X
 84a:	6d 93       	st	X+, r22
 84c:	70 83       	st	Z, r23
 84e:	62 91       	ld	r22, -Z
 850:	ae 17       	cp	r26, r30
 852:	bf 07       	cpc	r27, r31
 854:	c8 f3       	brcs	.-14     	; 0x848 <strrev+0x10>
 856:	08 95       	ret

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
