
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000939  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ac  00000000  00000000  00001257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000315  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  64:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LCD_cmd>:

#include "LCD.h"

void LCD_cmd(unsigned char command)
{
	LCD_PORT &= ~(1 << RS); // Command mode
  6c:	92 b3       	in	r25, 0x12	; 18
  6e:	9e 7f       	andi	r25, 0xFE	; 254
  70:	92 bb       	out	0x12, r25	; 18
	
	// Send most significant bits
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0); // Clear last commands
  72:	92 b3       	in	r25, 0x12	; 18
  74:	9f 70       	andi	r25, 0x0F	; 15
  76:	28 2f       	mov	r18, r24
  78:	20 7f       	andi	r18, 0xF0	; 240
  7a:	92 2b       	or	r25, r18
  7c:	92 bb       	out	0x12, r25	; 18
	
	// Send pulse Note: (Works in fall edge)
	LCD_PORT |= (1 << EN);
  7e:	92 b3       	in	r25, 0x12	; 18
  80:	92 60       	ori	r25, 0x02	; 2
  82:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	e9 ef       	ldi	r30, 0xF9	; 249
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <LCD_cmd+0x1c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <LCD_cmd+0x22>
  8e:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1 << EN);
  90:	92 b3       	in	r25, 0x12	; 18
  92:	9d 7f       	andi	r25, 0xFD	; 253
  94:	92 bb       	out	0x12, r25	; 18
  96:	e3 ec       	ldi	r30, 0xC3	; 195
  98:	f9 e0       	ldi	r31, 0x09	; 9
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_cmd+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_cmd+0x34>
  a0:	00 00       	nop
	
	_delay_ms(10);
	
	// Send least significant bits
	LCD_PORT = (LCD_PORT & 0x0F) | ((command << 4) & 0xF0); // Clear last commands
  a2:	22 b3       	in	r18, 0x12	; 18
  a4:	f0 e1       	ldi	r31, 0x10	; 16
  a6:	8f 9f       	mul	r24, r31
  a8:	c0 01       	movw	r24, r0
  aa:	11 24       	eor	r1, r1
  ac:	92 2f       	mov	r25, r18
  ae:	9f 70       	andi	r25, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
	
	// Send pulse Note: (Works in fall edge)
	LCD_PORT |= (1 << EN);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_cmd+0x52>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_cmd+0x58>
  c4:	00 00       	nop
	_delay_ms(1);
	LCD_PORT &= ~(1 << EN);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	82 bb       	out	0x12, r24	; 18
  cc:	e3 ec       	ldi	r30, 0xC3	; 195
  ce:	f9 e0       	ldi	r31, 0x09	; 9
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_cmd+0x64>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_cmd+0x6a>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_init>:
	_delay_ms(10);
}

void LCD_init()
{
	LCD_DRR = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	81 bb       	out	0x11, r24	; 17
	
	LCD_cmd(0x02); /* 4 bit mode initialization of LCD */
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	LCD_cmd(0x28); /* 4 bit mode */
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	LCD_cmd(0x0c); /* Display on cursor off */
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	LCD_cmd(0x06); /* Increment cursor by one */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
	LCD_cmd(0x01); /* Clear screen */
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <LCD_cmd>
  fc:	08 95       	ret

000000fe <LCD_sendLetter>:
}

void LCD_sendLetter(unsigned char character)
{
		LCD_PORT |= (1 << RS); // Data Register mode
  fe:	92 b3       	in	r25, 0x12	; 18
 100:	91 60       	ori	r25, 0x01	; 1
 102:	92 bb       	out	0x12, r25	; 18
		
		// Send most significant bits
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0); // Clear last character 01011001
 104:	92 b3       	in	r25, 0x12	; 18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	28 2f       	mov	r18, r24
 10a:	20 7f       	andi	r18, 0xF0	; 240
 10c:	92 2b       	or	r25, r18
 10e:	92 bb       	out	0x12, r25	; 18

		// Send pulse Note: (Works in fall edge)
		LCD_PORT |= (1 << EN);
 110:	92 b3       	in	r25, 0x12	; 18
 112:	92 60       	ori	r25, 0x02	; 2
 114:	92 bb       	out	0x12, r25	; 18
 116:	e9 ef       	ldi	r30, 0xF9	; 249
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_sendLetter+0x1c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_sendLetter+0x22>
 120:	00 00       	nop
		_delay_ms(1);
		LCD_PORT &= ~(1 << EN);
 122:	92 b3       	in	r25, 0x12	; 18
 124:	9d 7f       	andi	r25, 0xFD	; 253
 126:	92 bb       	out	0x12, r25	; 18
 128:	e3 ec       	ldi	r30, 0xC3	; 195
 12a:	f9 e0       	ldi	r31, 0x09	; 9
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_sendLetter+0x2e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_sendLetter+0x34>
 132:	00 00       	nop
		
		_delay_ms(10);
		
		// Send least significant bits
		LCD_PORT = (LCD_PORT & 0x0F) | ((character << 4) & 0xF0); // Clear last character
 134:	22 b3       	in	r18, 0x12	; 18
 136:	f0 e1       	ldi	r31, 0x10	; 16
 138:	8f 9f       	mul	r24, r31
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	92 2f       	mov	r25, r18
 140:	9f 70       	andi	r25, 0x0F	; 15
 142:	89 2b       	or	r24, r25
 144:	82 bb       	out	0x12, r24	; 18
		
		// Send pulse Note: (Works in fall edge)
		LCD_PORT |= (1 << EN);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	89 ef       	ldi	r24, 0xF9	; 249
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_sendLetter+0x52>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_sendLetter+0x58>
 156:	00 00       	nop
		_delay_ms(1);
		LCD_PORT &= ~(1 << EN);
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	8d 7f       	andi	r24, 0xFD	; 253
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	e3 ec       	ldi	r30, 0xC3	; 195
 160:	f9 e0       	ldi	r31, 0x09	; 9
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_sendLetter+0x64>
 166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_sendLetter+0x6a>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <main>:
#define F_CPU 1000000UL
#include "./ECU/LCD/LCD.h"

int main(void)
{
    LCD_init();
 16c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_init>
	while (1) 
    {
	LCD_sendLetter(89);
 170:	89 e5       	ldi	r24, 0x59	; 89
 172:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_sendLetter>
 176:	fc cf       	rjmp	.-8      	; 0x170 <main+0x4>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
